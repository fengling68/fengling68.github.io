import{_ as n,o as s,c as a,d as t}from"./app.8d44daf6.js";const p={},e=t(`<h1 id="_20201102-\u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u51FA\u73B0\u6B21\u6570" tabindex="-1"><a class="header-anchor" href="#_20201102-\u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u51FA\u73B0\u6B21\u6570" aria-hidden="true">#</a> 20201102 \u5B57\u7B26\u4E32\u4E2D\u5355\u8BCD\u51FA\u73B0\u6B21\u6570</h1><h2 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u7ED9\u51FA\u5982\u4E0B\u5B57\u7B26\u4E32\uFF0C\u8BF7\u8F93\u51FA\u5B57\u7B26\u4E32\u4E2D\u6BCF\u4E2A\u5355\u8BCD\u51FA\u73B0\u7684\u6B21\u6570</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;yesterday is sunday, today is sunday, tomorrow is Sunday. so everyday is sunday.&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_1-\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#_1-\u6B63\u5219" aria-hidden="true">#</a> 1. \u6B63\u5219</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * \u65B9\u6CD5\u4E00
 * \\w \u8868\u793A\u5339\u914D\u5305\u62EC\u4E0B\u5212\u7EBF\u7684\u4EFB\u4F55\u5355\u8BCD\u5B57\u7B26
 * () \u62EC\u53F7\u7528\u4E8E\u83B7\u53D6\u5B50\u5339\u914D
 * +  \u8868\u793A\u5339\u914D\u524D\u9762\u7684\u5B50\u8868\u8FBE\u5F0F\u4E00\u6B21\u6216\u591A\u6B21
 * 
 * \u5F53 result[key] \u4E0D\u5B58\u5728\u65F6
 * result[key] = undefined
 * result[key]++ = NaN
 * result[key]++ || value = value
 */</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><h2 id="_2-map" tabindex="-1"><a class="header-anchor" href="#_2-map" aria-hidden="true">#</a> 2. map</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\,|\\.|\\s\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_3-reduce" tabindex="-1"><a class="header-anchor" href="#_3-reduce" aria-hidden="true">#</a> 3. reduce</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// (cbObj[key]++ || (cbObj[key] = 1), cbObj)  &lt;\u7B49\u4EF7\u4E8E&gt;  cbObj[key]++ || (cbObj[key] = 1); return cbObj;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\,|\\.|\\s\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cbObj<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>cbObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>cbObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cbObj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u6392\u5E8F" aria-hidden="true">#</a> \u6392\u5E8F</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u6570\u7EC4\u53EF\u6392\u5E8F\uFF0C\u5BF9\u8C61\u4E0D\u53EF\u6392\u5E8F</span>
<span class="token comment">// sort: \u4ECE\u5C0F\u5230\u5927(a - b), \u4ECE\u5927\u5230\u5C0F(b - a)</span>

<span class="token comment">// \u65B9\u5F0F\u4E00</span>
<span class="token keyword">const</span> transformArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
transformArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u65B9\u5F0F\u4E8C</span>
<span class="token keyword">const</span> transformArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">word</span><span class="token operator">:</span> key<span class="token punctuation">,</span> <span class="token literal-property property">len</span><span class="token operator">:</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
transformArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>len <span class="token operator">-</span> a<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA" aria-hidden="true">#</a> \u8F93\u51FA</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u65E0\u5E8F\u5BF9\u8C61</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transformArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6709\u5E8F\u6570\u7EC4</span>
</code></pre></div>`,13),o=[e];function c(u,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","20201102.html.vue"]]);export{k as default};
