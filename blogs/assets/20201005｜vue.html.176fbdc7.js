import{_ as d,r as t,o as c,c as p,a as e,b as n,d as s,f as o}from"./app.873480e4.js";const r={},l=o('<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h1><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p><code>beforeCreadted</code></p><p><code>created</code></p><p><code>beforeMount</code></p><p><code>mounted</code></p><p><code>beforeUpdate</code></p><p><code>updated</code></p><p><code>beforeDestroy</code></p><p><code>destroyed</code></p><p><code>activated</code>：被 <code>keep-alive</code> 缓存的组件激活时调用</p><p><code>deactivated</code>：被 <code>keep-alive</code> 缓存的组件停用时调用</p><p><code>errorCaptured(err, component, originInfo)</code>：当捕获一个来自子孙组件的错误时被调用</p><h2 id="生命周期图" tabindex="-1"><a class="header-anchor" href="#生命周期图" aria-hidden="true">#</a> 生命周期图</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue 生命周期图"></p><h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h2><p><code>v-text</code></p><p><code>v-html</code></p><p><code>v-show</code></p><p><code>v-if</code></p><p><code>v-else</code></p><p><code>v-else-if</code></p><p><code>v-on</code></p><p><code>v-bind</code></p><p><code>v-model</code></p><p><code>v-slot</code></p><p><code>v-pre</code></p><p><code>v-cloak</code></p><p><code>v-once</code></p><h2 id="vue-组件通信" tabindex="-1"><a class="header-anchor" href="#vue-组件通信" aria-hidden="true">#</a> Vue 组件通信</h2>',30),i={href:"https://segmentfault.com/a/1190000019208626",target:"_blank",rel:"noopener noreferrer"},h=o(`<ul><li><p><code>props</code></p><ul><li>父子</li></ul></li><li><p><code>$emit</code>/<code>$on</code></p><ul><li><p>父子、兄弟、跨级</p></li><li><p><code>var EventBus = new Vue(); EventBus.$emit(name, data); Event.$on(name, data =&gt; {});</code></p></li></ul></li><li><p><code>$parent</code> / <code>$children</code></p></li><li><p><code>$attrs</code>/<code>$listeners</code></p></li><li><p><code>provide</code> / <code>inject</code></p></li><li><p><code>vuex</code></p></li></ul><h2 id="vue-cli-设置-proxy-为什么能跨域" tabindex="-1"><a class="header-anchor" href="#vue-cli-设置-proxy-为什么能跨域" aria-hidden="true">#</a> vue-cli 设置 proxy 为什么能跨域</h2><p>插件：<code>http-proxy-middleware</code></p><p>原理：后端请求不受跨域限制</p><p>环境：只适用本地开发</p><p>实现：开发环境下将 API 请求代理到 API 服务器，在本地虚拟一个服务器接收请求并代替发送请求，因为是本地虚拟等服务端帮忙请求接口，就没有跨域问题了。</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 加载以及渲染过程</span>
父beforeCreate -<span class="token operator">&gt;</span> 父created -<span class="token operator">&gt;</span> 父beforeMount -<span class="token operator">&gt;</span> 子beforeCreate -<span class="token operator">&gt;</span> 子create -<span class="token operator">&gt;</span> 子beforeMount -<span class="token operator">&gt;</span> 子mounted -<span class="token operator">&gt;</span> 父mounted

<span class="token comment"># 更新过程</span>
父beforeUpdate -<span class="token operator">&gt;</span> 子beforeUpdate -<span class="token operator">&gt;</span> 子updated -<span class="token operator">&gt;</span> 父updated

<span class="token comment"># 销毁过程</span>
父beforeDestroy -<span class="token operator">&gt;</span> 子beforeDestroy -<span class="token operator">&gt;</span> 子destroyed -<span class="token operator">&gt;</span> 父destroyed

<span class="token comment"># 简易版常用</span>
父created  -<span class="token operator">&gt;</span> 子create -<span class="token operator">&gt;</span> 子mounted -<span class="token operator">&gt;</span> 父mounted
</code></pre></div>`,8);function u(v,f){const a=t("ExternalLinkIcon");return c(),p("div",null,[l,e("p",null,[e("a",i,[n("vue组件间通信六种方式（完整版）"),s(a)])]),h])}const g=d(r,[["render",u],["__file","20201005｜vue.html.vue"]]);export{g as default};
