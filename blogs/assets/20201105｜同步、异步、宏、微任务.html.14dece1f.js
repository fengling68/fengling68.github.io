import{_ as o,r as p,o as e,c,a as n,b as s,d as t,f as l}from"./app.70e3165a.js";const u={},i=l(`<h1 id="同步、异步、宏、微任务" tabindex="-1"><a class="header-anchor" href="#同步、异步、宏、微任务" aria-hidden="true">#</a> 同步、异步、宏、微任务</h1><h2 id="示例题-懵" tabindex="-1"><a class="header-anchor" href="#示例题-懵" aria-hidden="true">#</a> 示例题（懵）</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步 async 创建 --- async-1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步回调微任务 --- async-1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步 async 创建 --- async-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步回调宏任务 --- settimeout-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步回调宏任务 --- settimeout-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步 Promise 创建 --- promise-1-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步回调微任务 --- promise-1-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步 Promise 创建 --- promise-2-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步回调微任务 --- promise-2-2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><blockquote><p>1、JavaScript 是一门<code>单线程</code>语言，即同一时间只能执行同一段代码；</p><p>2、<code>事件循环（event loop）</code>是 JavaScript 实现异步的一种方法，也是 JavaScript 的<code>执行机制</code>；</p><p>3、JS 分为<code>同步任务</code>和<code>异步任务</code>，同步任务进入<code>主线程执行栈</code>，异步任务回调进入 <code>任务队列</code>，而任务队列里又分为<code>宏任务队列</code>和<code>微任务队列</code>；</p><p>4、JS 引擎存在<code>monitoring process</code>进程，持续不断的检查主线程执行栈是否为空，为空则去<code>任务队列</code>里检查是否有可执行的函数；</p><p>5、宿主环境（Browser、Node）提供的叫宏任务，语言标准（JavaScript）提供的叫微任务。</p><p><strong>同步任务</strong></p><p>在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</p><p><strong>异步任务</strong></p><p>不进入主线程，而进入 <code>任务队列（task queue）</code> 的任务，等主线程任务全部执行完成后，主线程会通过 <code>事件循环（event loop）</code> 去询问任务队列中是否有可被执行的任务，如果有这个任务就会被放进主线程执行；</p><p><strong>微任务</strong></p><p>优先级更高，可以插队执行，不用看定义顺序可以比宏任务先执行；</p><p><strong>宏任务</strong></p><p>优先级低，先定义的先执行，遵循先进先出的队列规则；</p><p><strong>任务执行顺序</strong></p><p>主线程执行栈：<code>先执行同步任务代码</code> &gt; <code>有异步任务完成执行相应回调</code></p><p>任务队列：<code>微任务（微任务队列）</code> &gt; <code>宏任务（宏任务队列）</code></p><p>任务执行顺序：建立于优先级之上的，promise（微任务） 和 async （微任务）优先级高于 setTimeout/setInterval（宏任务）；</p><p><strong>微任务（microtask）优先级</strong></p><p><code>process.nextTick</code> &gt; <code>Promise</code> = <code>MutationObserver</code></p><p><strong>宏任务（macrotask）优先级</strong></p><p><code>script主代码块</code> &gt; <code>setImmediate</code> &gt; <code>MessageChannel</code> &gt; <code>setTimeout / setInterval</code></p></blockquote><table><thead><tr><th>name</th><th>wait</th></tr></thead><tbody><tr><td>同步（Synchronous） 任务</td><td>需要等待，阻塞代码执行</td></tr><tr><td>异步（Asynchronous）任务</td><td>不需要等待（立即执行后，回调函数放入任务队列），不阻塞代码执行</td></tr></tbody></table><h2 id="同步任务-异步任务" tabindex="-1"><a class="header-anchor" href="#同步任务-异步任务" aria-hidden="true">#</a> 同步任务&amp;异步任务</h2><table><thead><tr><th>浏览器端事件</th><th>同步任务</th><th>异步任务</th></tr></thead><tbody><tr><td>同步代码</td><td>✅</td><td>❌</td></tr><tr><td>UI rendering</td><td>✅</td><td>❌</td></tr><tr><td>图片、音视频加载</td><td>❌</td><td>✅</td></tr><tr><td>事件绑定监听（dom操作、click事件等）</td><td>❌</td><td>✅</td></tr><tr><td>setTimeout/setInterval</td><td>❌</td><td>✅</td></tr><tr><td>Ajax</td><td>❌</td><td>✅</td></tr><tr><td>Promise</td><td>❌</td><td>✅</td></tr></tbody></table><h2 id="宏任务-微任务" tabindex="-1"><a class="header-anchor" href="#宏任务-微任务" aria-hidden="true">#</a> 宏任务&amp;微任务</h2>`,9),r=n("thead",null,[n("tr",null,[n("th",null,"浏览器端事件"),n("th",null,"宏任务"),n("th",null,"微任务")])],-1),d=n("tr",null,[n("td",null,"I/O"),n("td",null,"✅"),n("td",null,"❌")],-1),k=n("tr",null,[n("td",null,"requestAnimationFrame"),n("td",null,"✅"),n("td",null,"❌")],-1),h=n("tr",null,[n("td",null,"setTimeout"),n("td",null,"✅"),n("td",null,"❌")],-1),_=n("tr",null,[n("td",null,"setInterval"),n("td",null,"✅"),n("td",null,"❌")],-1),g=n("tr",null,[n("td",null,"async/await（等待后面函数运行完成返回结果）"),n("td",null,"❌"),n("td",null,"✅")],-1),f=n("tr",null,[n("td",null,"Promise回调函数 （then、catch、finally）"),n("td",null,"❌"),n("td",null,"✅")],-1),m=n("tr",null,[n("td",null,"其他回调函数"),n("td",null,"❌"),n("td",null,"✅")],-1),b={href:"https://juejin.im/entry/57de3fc30bd1d00057f2ea33",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"❌",-1),v=n("td",null,"✅",-1),w=n("h2",{id:"参考-推荐文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考-推荐文章","aria-hidden":"true"},"#"),s(" 参考&推荐文章")],-1),x={href:"https://ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.dazhuanlan.com/2019/12/07/5deb2bd6010f5/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.im/post/5b73d7a6518825610072b42b",target:"_blank",rel:"noopener noreferrer"},I={href:"https://juejin.im/post/59e85eebf265da430d571f89",target:"_blank",rel:"noopener noreferrer"};function J(T,P){const a=p("ExternalLinkIcon");return e(),c("div",null,[i,n("table",null,[r,n("tbody",null,[d,k,h,_,g,f,m,n("tr",null,[n("td",null,[n("a",b,[s("MutationObserver"),t(a)])]),y,v])])]),w,n("p",null,[n("a",x,[s("JavaScript 运行机制详解：再谈Event Loop"),t(a)])]),n("p",null,[n("a",j,[s("微任务与宏任务"),t(a)])]),n("p",null,[n("a",S,[s("微任务、宏任务与Event-Loop"),t(a)])]),n("p",null,[n("a",I,[s("这一次，彻底弄懂 JavaScript 执行机制"),t(a)])])])}const N=o(u,[["render",J],["__file","20201105｜同步、异步、宏、微任务.html.vue"]]);export{N as default};
