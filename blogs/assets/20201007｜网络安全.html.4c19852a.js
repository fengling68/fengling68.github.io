import{_ as r,r as t,o as n,c as d,a as e,b as o,d as i,f as a}from"./app.3f8066ad.js";const c={},h=e("h1",{id:"请求-网络相关",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#请求-网络相关","aria-hidden":"true"},"#"),o(" 请求&网络相关")],-1),s=e("h2",{id:"get-和-post-区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#get-和-post-区别","aria-hidden":"true"},"#"),o(" GET 和 POST 区别")],-1),p={href:"https://www.zhihu.com/question/28586791",target:"_blank",rel:"noopener noreferrer"},u={href:"https://zhuanlan.zhihu.com/p/25028045",target:"_blank",rel:"noopener noreferrer"},_=a('<blockquote><p>GET 和 POST 本质上就是 TCP 链接并无差别，但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p></blockquote><ol><li>安全</li><li>长度</li><li>后退刷新</li><li>数据位置</li><li>请求个数</li><li>Get获取数据，Post提交数据</li></ol><h2 id="options-请求" tabindex="-1"><a class="header-anchor" href="#options-请求" aria-hidden="true">#</a> OPTIONS 请求</h2>',3),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS",target:"_blank",rel:"noopener noreferrer"},S=a('<h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><h3 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h3><p><code>同源策略限制</code>：同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。 <code>跨域</code>：当一个请求url的 <code>协议、域名、端口</code> 三者之间任意一个与当前页面url不同即为跨域。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><ol><li><code>jsonp</code></li><li><code>document.domain + iframe</code></li><li><code>location.hash + iframe</code></li><li><code>window.name + iframe</code></li><li><code>postMessage</code></li><li><code>CORS</code> 跨域资源共享</li><li><code>nginx代理</code></li><li><code>nodejs中间件代理</code></li><li><code>WebSocket协议</code></li><li><code>vue框架里设置proxy代理等</code></li></ol><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p><code>jsonp</code> 能达到跨域效果，是利用 <code>script</code> 标签自身的跨域能力；</p><p><code>jsonp</code> 是一种非正式传输协议，该协议的一个要点就是允许用户传递一个 <code>callback</code> 或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个 <code>callback</code> 参数作为函数名来包裹住 <code>JSON</code> 数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了；</p><p><code>jsonp</code> 只能使用 <code>GET</code> 方式发起跨域请求；</p><p><code>jsonp</code> 的优势在于支持老式浏览器，以及可以向不支持 <code>CORS</code> 的网站请求数据；</p><p><code>jsonp</code> 跨域请求需要服务端配合，设置 <code>callback</code>，才能完成跨域请求。</p><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p><code>CORS</code> 是一个 <code>W3C</code> 标准，全称是&quot;跨域资源共享&quot;;</p><p><code>CORS</code> 允许浏览器向跨源服务器，发出 <code>XMLHttpRequest</code> 请求，从而克服了 <code>AJAX</code> 只能同源使用的限制;</p><p><code>CORS</code> 需要浏览器和服务器（<code>Access-Control-Allow-Origin: *</code>）同时支持;</p><p><code>CORS</code> 支持所有类型的 <code>HTTP</code> 请求。</p><h2 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h2>',17),b={href:"https://zhuanlan.zhihu.com/p/22521378",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/136745749",target:"_blank",rel:"noopener noreferrer"},m=a('<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p><code>CSRF（Cross-site request forgery，跨站请求伪造）</code>：冒充受信任用户，向服务器发送非预期请求的攻击方式。</p><h3 id="防御方案" tabindex="-1"><a class="header-anchor" href="#防御方案" aria-hidden="true">#</a> 防御方案</h3><ol><li>客户端对于数据库的修改请求，全部使用POST提交，禁止使用GET请求；</li><li>服务端一般的做法是在表单里面添加一段隐藏的唯一的 token(请求令牌)；</li><li>Referer Check防盗链，检测请求是否来自合法的源；</li><li>验证码；</li></ol><h2 id="xss" tabindex="-1"><a class="header-anchor" href="#xss" aria-hidden="true">#</a> XSS</h2>',5),x={href:"https://zhuanlan.zhihu.com/p/37455061",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.cnblogs.com/caizhenbo/p/6836390.html",target:"_blank",rel:"noopener noreferrer"},C=a('<h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h3><p><code>XSS（跨站脚本攻击）</code>：恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ul><li><p><strong>DOM型（无服务器参与）</strong></p><ul><li>输入 XSS 代码内容(URL) -&gt; 浏览器DOM解析-&gt; 触发 XSS 攻击</li></ul></li><li><p><strong>反射型</strong></p><ul><li>输入 XSS 代码内容(URL) -&gt; 服务器解析返回 -&gt; 浏览器解释执行 -&gt; 触发 XSS 攻击</li></ul></li><li><p><strong>存储型</strong></p><ul><li>提交 XSS 代码内容(表单、评论) -&gt; 存储至服务器 -&gt; 用户请求数据 -&gt; 服务器返回数据 -&gt; 浏览器解释执行 -&gt; 触发 XSS 攻击</li></ul></li></ul><h3 id="防御方案-1" tabindex="-1"><a class="header-anchor" href="#防御方案-1" aria-hidden="true">#</a> 防御方案</h3><ol><li>编码：转义用户的输入； 将 <code>&amp;</code> 转为 <code>&amp;amp</code> 将 <code>&lt;</code> 转为 <code>&amp;lt</code> 将 <code>&gt;</code> 转为 <code>&amp;gt</code> 将 <code>&quot;</code> 转为 <code>&amp;quot</code></li><li>校验，对输入及请求进行过滤检查，如过滤特殊字符，设置输入域匹配规则等；</li><li>避免内联事件，如 <code>onclick</code>、<code>onload</code> 等；</li><li>避免拼接 <code>HTML</code>；</li></ol><h2 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a> 浏览器缓存</h2>',7),O={href:"https://www.cnblogs.com/jing-tian/p/11284471.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://zhuanlan.zhihu.com/p/23299600",target:"_blank",rel:"noopener noreferrer"},R=a('<h3 id="九大缓存" tabindex="-1"><a class="header-anchor" href="#九大缓存" aria-hidden="true">#</a> 九大缓存</h3><ul><li><p><strong>http 缓存</strong></p><ul><li>基于HTTP协议的浏览器文件级缓存机制，减少重复请求；</li><li>expires、etag、last-modified；</li></ul></li><li><p><strong>flash 缓存</strong></p><ul><li>基于flash有读写浏览器端本地目录的功能，通过js调用flash去读写特定的磁盘目录，达到本地数据缓存的目的；</li><li>基本不用</li></ul></li><li><p><strong>Local Storage</strong></p><ul><li>键值对存储；</li><li>大小限制由不同浏览器决定；</li><li>需要手动删除</li></ul></li><li><p><strong>Session Storage</strong></p><ul><li>键值对存储；</li><li>大小限制由不同浏览器决定；</li><li>关闭则全部删除</li></ul></li><li><p><strong>Cookies</strong></p><ul><li>键、值、域、过期时间、大小等组成；</li><li>最大长度和域名个数由不同浏览器决定；</li><li>网站为辨别用户身份、保存用户认证信息、进行session跟踪而储存在本地的数据(加密)，一般通过请求头一起发送到服务端；</li></ul></li><li><p><strong>IndexedDB</strong></p><ul><li>在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API；</li><li>分别为同步和异步访问提供了单独的 API；</li></ul></li><li><p><strong>Web SQL</strong></p><ul><li>数据库形式存储，支持sql语句查询；</li><li>创建 openDatabase()、查询 transaction()、执行 executeSql()；</li></ul></li><li><p><strong>Application Cache</strong></p><ul><li>将大部分图片资源、js、css等静态资源放在manifest文件配置中，当页面打开时通过manifest来读取本地文件或请求服务器文件；</li><li>缺点：至少访问在线页面一次；</li><li>优点：离线缓存、速度快、服务器负载少；</li></ul></li><li><p><strong>Cache Storage</strong></p><ul><li>保存每个serverWorker申明的cache对象；</li><li>五个核心方法：open()、match()、has()、delete()、keys()；</li></ul></li></ul><h3 id="http缓存机制" tabindex="-1"><a class="header-anchor" href="#http缓存机制" aria-hidden="true">#</a> HTTP缓存机制</h3><ul><li>无缓存</li><li>缓存 + 无更新</li><li>缓存 + Expires 更新机制</li><li>缓存 + Cache-Control 更新机制</li><li>缓存 + Cache-Control + ETag 更新机制（服务器再验证）</li></ul><h2 id="前后端鉴权" tabindex="-1"><a class="header-anchor" href="#前后端鉴权" aria-hidden="true">#</a> 前后端鉴权</h2>',5),z={href:"https://www.cnblogs.com/hooo-1102/p/12048996.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zhuanlan.zhihu.com/p/110990545",target:"_blank",rel:"noopener noreferrer"},j={href:"https://segmentfault.com/q/1010000005863801/",target:"_blank",rel:"noopener noreferrer"},q=a('<h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><ul><li>用户登录成功后，服务端存session，客户端存cookie=sessionID；</li><li>用户再次请求，携带cookie至服务端进行验证；</li><li>cookie是有状态的、存在跨域问题、CSRF安全问题；</li></ul><h3 id="token" tabindex="-1"><a class="header-anchor" href="#token" aria-hidden="true">#</a> token</h3><ul><li>用户进行操作都带上token；</li><li>token只需存在客户端，服务端进行解析；</li><li>存在形式多样，header/requestbody/url 都可以；</li><li>token是无状态的、支持跨域、可避免 CSRF 跨站伪造攻击</li></ul>',4);function X(E,N){const l=t("ExternalLinkIcon");return n(),d("div",null,[h,s,e("p",null,[e("a",p,[o("GET 和 POST 到底有什么区别？"),i(l)])]),e("p",null,[e("a",u,[o("听说『99% 的人都理解错了 HTTP 中 GET 与 POST 的区别』？？"),i(l)])]),_,e("ol",null,[e("li",null,[e("p",null,[e("a",f,[o("OPTIONS"),i(l)]),o("可以检测服务器所支持的请求方法；")])]),e("li",null,[e("p",null,[e("a",g,[o("CORS（跨域资源共享）"),i(l)]),o("中发起预检请求，可以检测实际请求是否可以被服务器所接受；")])])]),S,e("p",null,[e("a",b,[o("CSRF 是什么？"),i(l)])]),e("p",null,[e("a",k,[o("面试官：什么是CSRF？"),i(l)])]),m,e("p",null,[e("a",x,[o("【前端黑客】XSS入门"),i(l)])]),e("p",null,[e("a",T,[o("【前端安全】JavaScript防XSS攻击"),i(l)])]),C,e("p",null,[e("a",O,[o("简述浏览器端的九大缓存"),i(l)])]),e("p",null,[e("a",P,[o("简述浏览器缓存是如何控制的"),i(l)])]),R,e("p",null,[e("a",z,[o("前后端分离 token 和 cookie 对比"),i(l)])]),e("p",null,[e("a",w,[o("关于前后端鉴权的几种方式"),i(l)])]),e("p",null,[e("a",j,[o("前后端鉴权问答"),i(l)])]),q])}const H=r(c,[["render",X],["__file","20201007｜网络安全.html.vue"]]);export{H as default};
