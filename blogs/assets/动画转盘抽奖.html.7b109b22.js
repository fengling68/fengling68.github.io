import{_ as n,o as s,c as a,f as t}from"./app.4112d7f2.js";const p={},o=t(`<h1 id="动画转盘抽奖" tabindex="-1"><a class="header-anchor" href="#动画转盘抽奖" aria-hidden="true">#</a> 动画转盘抽奖</h1><h2 id="转盘计算奖品旋转位置" tabindex="-1"><a class="header-anchor" href="#转盘计算奖品旋转位置" aria-hidden="true">#</a> 转盘计算奖品旋转位置</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">computingAngle</span><span class="token punctuation">(</span><span class="token parameter">awards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">CIRCLE_ANGLE</span> <span class="token operator">=</span> <span class="token number">360</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> average <span class="token operator">=</span> <span class="token constant">CIRCLE_ANGLE</span> <span class="token operator">/</span> awards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  awards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">*</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      -webkit-transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);
      transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> awards<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><h2 id="文字弯曲效果" tabindex="-1"><a class="header-anchor" href="#文字弯曲效果" aria-hidden="true">#</a> 文字弯曲效果</h2><h3 id="定义方法" tabindex="-1"><a class="header-anchor" href="#定义方法" aria-hidden="true">#</a> 定义方法</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 传入数组使字符出现弯曲效果，需控制字数调整显示效果（待完善）
 * <span class="token keyword">@param</span> <span class="token parameter">data</span> <span class="token punctuation">{</span>
 *  text: Array,
 *  rLen: Number, // 旋转角度
 *  xLen: Number, // 位移 x
 *  yLen: Number, // 位移 y
 * <span class="token punctuation">}</span>
 */</span>
<span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    text<span class="token punctuation">,</span> rLen <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> xLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> yLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> isEven <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> isEven <span class="token operator">?</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  text<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 偶数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> condition <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">&lt;</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> midIndex<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">&gt;</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> midIndex<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">===</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      index <span class="token operator">=</span> condition<span class="token punctuation">[</span>condition<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 奇数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      index <span class="token operator">=</span> i <span class="token operator">-</span> midIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      display: inline-block;
      -webkit-transform-origin: 50% 100%;
      transform-origin: 50% 100%;
      -webkit-transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> rLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg) translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> xLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> yLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px);
      transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> rLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg) translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> xLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> yLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px);
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> word<span class="token punctuation">,</span> style <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> words<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 字符串截取 &amp; 转换数组
 */</span>
<span class="token function">cutStr</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> maxLen<span class="token punctuation">,</span> ellipsis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> newStr <span class="token operator">=</span> len <span class="token operator">&gt;</span> maxLen <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">;</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> newStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ellipsis <span class="token operator">&amp;&amp;</span> len <span class="token operator">&gt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> newArr<span class="token punctuation">,</span>
    <span class="token literal-property property">rLen</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xLen</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">yLen</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> words<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;五四三贰壹贰三四五&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cutStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;哈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;哈&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,9),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","动画转盘抽奖.html.vue"]]);export{i as default};
