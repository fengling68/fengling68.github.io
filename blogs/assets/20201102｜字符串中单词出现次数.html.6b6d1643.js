import{_ as n,o as s,c as a,f as t}from"./app.b042072c.js";const p={},e=t(`<h1 id="字符串中单词出现次数" tabindex="-1"><a class="header-anchor" href="#字符串中单词出现次数" aria-hidden="true">#</a> 字符串中单词出现次数</h1><h2 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 给出如下字符串，请输出字符串中每个单词出现的次数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;yesterday is sunday, today is sunday, tomorrow is Sunday. so everyday is sunday.&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_1-正则" tabindex="-1"><a class="header-anchor" href="#_1-正则" aria-hidden="true">#</a> 1. 正则</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 方法一
 * \\w 表示匹配包括下划线的任何单词字符
 * () 括号用于获取子匹配
 * +  表示匹配前面的子表达式一次或多次
 * 
 * 当 result[key] 不存在时
 * result[key] = undefined
 * result[key]++ = NaN
 * result[key]++ || value = value
 */</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><h2 id="_2-map" tabindex="-1"><a class="header-anchor" href="#_2-map" aria-hidden="true">#</a> 2. map</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\,|\\.|\\s\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_3-reduce" tabindex="-1"><a class="header-anchor" href="#_3-reduce" aria-hidden="true">#</a> 3. reduce</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (cbObj[key]++ || (cbObj[key] = 1), cbObj)  &lt;等价于&gt;  cbObj[key]++ || (cbObj[key] = 1); return cbObj;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\,|\\.|\\s\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cbObj<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>cbObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">||</span> <span class="token punctuation">(</span>cbObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cbObj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组可排序，对象不可排序</span>
<span class="token comment">// sort: 从小到大(a - b), 从大到小(b - a)</span>

<span class="token comment">// 方式一</span>
<span class="token keyword">const</span> transformArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
transformArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方式二</span>
<span class="token keyword">const</span> transformArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">word</span><span class="token operator">:</span> key<span class="token punctuation">,</span> <span class="token literal-property property">len</span><span class="token operator">:</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
transformArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>len <span class="token operator">-</span> a<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无序对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transformArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有序数组</span>
</code></pre></div>`,13),o=[e];function c(u,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","20201102｜字符串中单词出现次数.html.vue"]]);export{k as default};
