<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://h8396x.coding-pages.com</id>
    <title>长安长安 </title>
    <updated>2020-10-13T12:57:18.087Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://h8396x.coding-pages.com"/>
    <link rel="self" href="https://h8396x.coding-pages.com/atom.xml"/>
    <subtitle>🎐吾生也有涯，而知也无涯，以有涯随无涯，乐也。🎐</subtitle>
    <logo>https://h8396x.coding-pages.com/images/avatar.png</logo>
    <icon>https://h8396x.coding-pages.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 长安长安 </rights>
    <entry>
        <title type="html"><![CDATA[Gridea配置相关教程]]></title>
        <id>https://h8396x.coding-pages.com/post/_GhhwdueG/</id>
        <link href="https://h8396x.coding-pages.com/post/_GhhwdueG/">
        </link>
        <updated>2020-07-29T13:17:26.000Z</updated>
        <content type="html"><![CDATA[<p>Gridea 博客加上Valine评论系统：https://kveln.cn/post/qE678A4ce/</p>
<p>Gridea 博客增加搜索功能：https://tangkaichuan.cn/search-for-gridea-blog/</p>
<p>使用 instant.page预加速Gridea博客：https://kveln.cn/post/BMDxD6cBT/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义和压缩字体]]></title>
        <id>https://h8396x.coding-pages.com/post/BIwO6ZEuT/</id>
        <link href="https://h8396x.coding-pages.com/post/BIwO6ZEuT/">
        </link>
        <updated>2019-11-23T12:54:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="自定义字体">自定义字体</h2>
<pre><code class="language-css">@font-face {
    font-family: &quot;self-font&quot;;
    src: url(&quot;fonts/xxx.ttf&quot;) format('truetype');
}

.word {
    font-family: &quot;self-font&quot;;
    font-size:50px;
}
</code></pre>
<h2 id="不同格式的字体文件-format-不一样">不同格式的字体文件 format() 不一样</h2>
<pre><code class="language-css">src: url('YourWebFontName.eot?') format('eot');
src: url('YourWebFontName.woff') format('woff');
src: url('YourWebFontName.ttf') format('truetype');
src: url('YourWebFontName.svg') format('svg');
</code></pre>
<h2 id="字体压缩工具字蛛">字体压缩工具字蛛</h2>
<p><a href="http://font-spider.org/">字蛛网：http://font-spider.org/</a></p>
<h3 id="1-安装字蛛">1、安装字蛛</h3>
<pre><code class="language-sh"># 安装命令
npm install font-spider -g
</code></pre>
<h3 id="2-添加文件和字体">2、添加文件和字体</h3>
<pre><code class="language-html">&lt;!-- index.html --&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
  &lt;title&gt;字体压缩demo&lt;/title&gt;
  &lt;style&gt;
    /* 自定义字体 */
    @font-face {
      font-family: &quot;self-font&quot;;
      src: url(&quot;./font/字体管家胖丫儿体.ttf&quot;) format('truetype');
    }
    /* 使用自定义字体 */
    .words {
      font-family: &quot;self-font&quot;;
      font-size:50px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- 添加需要保留的字 --&gt;
  &lt;div class=&quot;words&quot;&gt;
    0123456789
    一二三四五六七八九十
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="3-压缩字体">3、压缩字体</h3>
<pre><code class="language-sh"># 压缩命令
font-spider ./index.html
</code></pre>
<h3 id="4-目录结构">4、目录结构</h3>
<pre><code>.
├── [ 128]  font
│   ├── [  96]  .font-spider
│   │   └── [4.8M]  font.ttf   // 字蛛压缩后保存的原字体
│   └── [8.2K]  font.ttf       // 字蛛压缩后的新字体
└── [ 547]  index.html
</code></pre>
<h2 id="字体预览">字体预览</h2>
<p><a href="http://blog.luckly-mjw.cn/tool-show/iconfont-preview/index.html">ttf字体解析预览：http://blog.luckly-mjw.cn/tool-show/iconfont-preview/index.html</a></p>
<p>使用上面的网址可以看到压缩后的字体有：<br>
<img src="https://h8396x.coding-pages.com/post-images/1576937626172.png" alt="font-preview" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea添加看板猫]]></title>
        <id>https://h8396x.coding-pages.com/post/xiGntqoVl/</id>
        <link href="https://h8396x.coding-pages.com/post/xiGntqoVl/">
        </link>
        <updated>2019-08-18T13:14:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-下载相应模型">1、下载相应模型</h2>
<p>在github上搜索live2d或者live2dmodel可以找到很多相关的优质项目，例如：<br>
<a href="https://github.com/galnetwen/Live2D">Live2D</a><br>
<a href="https://github.com/xiazeyu/live2d-widget-models">live2d-widget-models</a></p>
<h2 id="2-放置目录">2、放置目录</h2>
<blockquote>
<p>本人将所有live2d都放在了assets目录下，如果你有更好的目录或者引入方式(比如<code>npm install</code>方式)，可以按照你的想法来哦～</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://h8396x.coding-pages.com/post-images/1566134187512.png" alt="" width="244" height="249" loading="lazy"></figure>
<h2 id="3-配置个性化提示语">3、配置个性化提示语</h2>
<blockquote>
<p>修改<code>message.json</code>内容可以定义自己喜欢的名言语录哦～</p>
</blockquote>
<pre><code class="language-json">{
  &quot;mouseover&quot;: [
    {
      &quot;selector&quot;: &quot;.inline a.menu&quot;,
      &quot;text&quot;: [
        &quot;hi，看官，要去看看吗，很精彩哦！&quot;
      ]
    },
    {
      &quot;selector&quot;: &quot;#searchbox&quot;,
      &quot;text&quot;: [
        &quot;在找什么东西呢，需要帮忙吗？&quot;
      ]
    }
  ],
  &quot;click&quot;: [
    {
      &quot;selector&quot;: &quot;#landlord #live2d&quot;,
      &quot;text&quot;: [
        &quot;是不是累了！快放松一下吧~~&quot;,
        &quot;我是不是很萌很可爱！&quot;,
        &quot;我们一起学猫叫，一起喵喵喵喵喵！&quot;,
        &quot;在你面前撒个娇，哎呦喵喵喵喵喵！&quot;,
        &quot;天青色等烟雨，而我在等你&quot;,
        &quot;哈哈哈哈哈哈哈哈哈&quot;
      ]
    }
  ]
}
</code></pre>
<h2 id="4-添加catejs文件">4、添加cat.ejs文件</h2>
<pre><code>&lt;!-- 看板白猫 --&gt;
&lt;div id=&quot;landlord&quot;&gt;
	&lt;div class=&quot;message&quot; style=&quot;opacity:0&quot;&gt;&lt;/div&gt;
	&lt;canvas id=&quot;live2d&quot; width=&quot;280&quot; height=&quot;250&quot; class=&quot;live2d&quot;&gt;&lt;/canvas&gt;
	&lt;div class=&quot;hide-button&quot;&gt;隐藏&lt;/div&gt;
&lt;/div&gt;

&lt;!-- 看板白猫 --&gt;
&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
	function loadScript(url, callback) {
		let script = document.createElement('script');
		if (script.readyState) { // IE
			script.onreadystatechange = function () {
				if (script.readyState === 'loaded' || script.readyState === 'complete') {
						script.onreadystatechange = null;
						callback();
				}
			} 
		} else { // 其他浏览器
			script.onload = function () {
				callback();
			}
		}
		script.src = url;
		document.body.appendChild(script);
	}

	var ua = window.navigator.userAgent.toLowerCase();
	var inWindow = !(/android|ipad|iphone|iPod/i.test(ua));
	// 电脑端加载并显示看板猫，移动端很容易崩溃，所以并不建议在移动端展示哦～
	if (inWindow) {
		var message_Path = 'https://....../media/live2d/';
		var link1 = &quot;https://....../media/live2d/live2d.js&quot;;
		var link2 = &quot;https://....../media/live2d/message.js&quot;;

		loadScript(link1, function(){
			loadScript(link2, function(){
				// 白天展示白猫，黑夜展示黑猫，嘿嘿嘿～
				var hour = (new Date()).getHours();
				if (hour &gt; 6 &amp;&amp; hour &lt; 18) {
					loadlive2d(&quot;live2d&quot;, &quot;https://....../media/live2d/modelWhiteCat/tororo.model.json&quot;);
				} else {
					loadlive2d(&quot;live2d&quot;, &quot;https://....../media/live2d/modelBlackCat/hijiki.model.json&quot;);
				}
			})
		})
	}
&lt;/script&gt;
</code></pre>
<h2 id="5-引入看板猫">5、引入看板猫</h2>
<blockquote>
<p>先将1、2、3步骤的修改部署至静态pages后；<br>
接下来只需要在相应的页面引入cat.ejs就可以看到看板猫哦～</p>
</blockquote>
<pre><code>&lt;%- include('./_blocks/cat') %&gt;
</code></pre>
<h2 id="6-效果图">6、效果图</h2>
<figure data-type="image" tabindex="2"><img src="https://h8396x.coding-pages.com/post-images/1566135052069.png" alt="" width="221" height="259" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea添加gittalk评论配置]]></title>
        <id>https://h8396x.coding-pages.com/post/NJ-nLz7Sq/</id>
        <link href="https://h8396x.coding-pages.com/post/NJ-nLz7Sq/">
        </link>
        <updated>2019-07-20T11:14:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-创建oauth-apps">一、创建OAuth Apps</h2>
<p>创建链接：https://github.com/settings/applications/new</p>
<figure data-type="image" tabindex="1"><img src="https://h8396x.coding-pages.com/post-images/1563621346821.png" alt="" width="600" height="600" loading="lazy"></figure>
<h2 id="二-进入oauth-apps详情复制client-id和client-secret">二、进入OAuth Apps详情，复制Client ID和Client Secret</h2>
<p><img src="https://h8396x.coding-pages.com/post-images/1563621369301.png" alt="" width="600" height="200" loading="lazy"><br>
<img src="https://h8396x.coding-pages.com/post-images/1563621394566.png" alt="" width="600" height="360" loading="lazy"></p>
<h2 id="三-gridea添加gittalk配置">三、Gridea添加gittalk配置</h2>
<figure data-type="image" tabindex="2"><img src="https://h8396x.coding-pages.com/post-images/1563621417837.png" alt="" width="600" height="500" loading="lazy"></figure>
<h2 id="四-添加gittalk时问题及解决">四、添加gittalk时问题及解决</h2>
<p>1、Not Found<br>
<img src="https://h8396x.coding-pages.com/post-images/1563621453956.png" alt="" width="600" height="200" loading="lazy"></p>
<blockquote>
<p>解决方案：<br>
此问题多为OAuth Apps的<code>Homepage URL</code>、<code>Authorization callback URL</code>和Gridea中的配置错误导致，细心检查配置正确链接即可。</p>
</blockquote>
<p>2、需初始化创建问题<br>
<img src="https://h8396x.coding-pages.com/post-images/1563621472465.png" alt="" width="600" height="200" loading="lazy"></p>
<blockquote>
<p>解决方案：<br>
1、开启GitHub仓库的<code>Issues</code>功能；<br>
<img src="https://h8396x.coding-pages.com/post-images/1563621492503.png" alt="" width="600" height="300" loading="lazy"></p>
</blockquote>
<blockquote>
<p>2、检查gittalk的id配置，长度是否超出限制；<br>
<img src="https://h8396x.coding-pages.com/post-images/1563621519445.png" alt="" width="600" height="200" loading="lazy"></p>
</blockquote>
<h2 id="五-gittalk">五、Gittalk</h2>
<blockquote>
<p>git地址&amp;文档：https://github.com/gitalk/gitalk/blob/master/readme-cn.md</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[electron-vue入门]]></title>
        <id>https://h8396x.coding-pages.com/post/4lZXt9fE9/</id>
        <link href="https://h8396x.coding-pages.com/post/4lZXt9fE9/">
        </link>
        <updated>2019-07-03T13:59:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-安装和启动">一、安装和启动</h2>
<pre><code># 安装 vue-cli和脚手架样板代码
npm install -g vue-cli
vue init simulatedgreg/electron-vue electronDemo

# 安装依赖并运行你的程序
cd electronDemo
npm install  # 或者yarn
npm run dev  # 或者yarn run dev
</code></pre>
<h2 id="二-打包打包文件在build目录下">二、打包（打包文件在build目录下）</h2>
<blockquote>
<p>(1)使用electron-packager打包</p>
</blockquote>
<pre><code># 针对所有或各平台打包
all  ：npm run build
macOS：npm run build:darwin
mas  ：npm run build:mas
linux：npm run build:linux
win32：npm run build:win32
web  ：npm run build:web

# 清除build目录下的打包文件
npm run build:clean
</code></pre>
<blockquote>
<p>(2)使用electron-builder打包</p>
</blockquote>
<pre><code># 针对所有平台打包
npm run build
# 生成简单的可执行文件
npm run build:dir
# 生成可在浏览器运行的web应用
npm run build:web

# 清除build目录下的打包文件
npm run build:clean
</code></pre>
<h2 id="三-开发出现的问题">三、开发出现的问题</h2>
<pre><code>0、其他
    (1)vue中使用&lt;webview&gt;标签打开一个url
    (2)建立主窗口：new BrowserWindow
    (3)在父主(父)窗口中创建子窗口：new BrowserView 
    
1、在electron-vue中使用vuex，无法改变vuex状态
    解决：在src/main/index.js主进程加上：import '../renderer/store';

2、设置跨域
    解决：在在src/main/index.js主进程new BrowserWindow内加上
    webPreferences: {
      webSecurity: false,
    },
    
3、添加通知
    new Notification('添加成功');
</code></pre>
<h2 id="四-main进程和web进程的通信">四、main进程和web进程的通信</h2>
<pre><code>/********** main ***********/
import { ipcMain } from 'electron'

// 接收web发送的信息
ipcMain.on('web-send-message-to-main', (event, arg) =&gt; {
  console.log(`mian-accept: ${arg}`);
  // 向web发送信息
  event.sender.send('main-send-message-to-web', 'main-to-web');
});

/********** web（.vue） ***********/
// import electron from 'electron';
// const { ipcRenderer } = electron;
import { ipcRenderer } from 'electron';

// 接收main发送的信息
ipcRenderer.on('main-send-message-to-web', (event, arg) =&gt; {
  console.log(`web-accept: ${arg}`);
});

// 向main发送信息
ipcRenderer.send('web-send-message-to-main', 'web-to-main');
// ipcRenderer.sendSync('web-send-message-to-main', 'web-to-main');
</code></pre>
<h2 id="五️-dialog对话框">五️、dialog对话框</h2>
<pre><code>// 在main中引入
import { dialog } from 'electron';

// 在vue组件中引入
// eslint配置 'import/no-extraneous-dependencies': 0,
import electron from 'electron';
const { dialog } = electron.remote;

// 打开对话框
dialog.showOpenDialog([{
  title: '打开文件',
  message: '打卡打开打开',
  filters: [
    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },
    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },
    { name: 'Custom File Type', extensions: ['as'] },
    { name: 'All Files', extensions: ['*'] },
  ],
  properties: {
    openFile: true,
    // ...
  },
}], (filePaths) =&gt; {
  console.log(filePaths);
});

// 保存对话框
dialog.showSaveDialog((filename) =&gt; {
  console.log(filename);
});

// 消息对话框
dialog.showMessageBox({
  title: '信息对话框',
  message: '北方有佳人，绝世而独立。',
  detail: '这是一首著名的诗',
  type: 'info', // &quot;none&quot;, &quot;info&quot;, &quot;error&quot;, &quot;question&quot;, &quot;warning&quot;
  buttons: ['确认', '取消'],
}, (resIndex) =&gt; {
  if (resIndex === 0) {
    console.log('点击了确认');
  } else if (resIndex === 1) {
    console.log('点击了取消');
  }
});

// 错误弹窗
dialog.showErrorBox('错误弹窗', '这是一个错误弹窗');
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuedraggable拖拽库]]></title>
        <id>https://h8396x.coding-pages.com/post/Sf0E-kOV_/</id>
        <link href="https://h8396x.coding-pages.com/post/Sf0E-kOV_/">
        </link>
        <updated>2019-07-03T13:59:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-安装">一、安装</h2>
<pre><code>npm i -S vuedraggable
</code></pre>
<h2 id="二-引入">二、引入</h2>
<pre><code>import draggable from 'vuedraggable';

components: {
  draggable,
},
</code></pre>
<h2 id="三-使用操作数据">三、使用(操作数据)</h2>
<pre><code>data() {
  return {
    myArray1: [1, 2, 3, 4, 5],
    myArray2: [6, 7, 8, 9, 10],
  };
},

&lt;div&gt;
  &lt;draggable
    group=&quot;people&quot;
    v-model=&quot;myArray1&quot;
    @choose='onChoose1'
    @clone='onClone1'
    @start='onStart1'
    @update='onUpdate1'
    @change=&quot;onChange1&quot;
    @add='onAdd1'
    @remove='onRemove1'
    @sort='onSort1'
    @end='onEnd1'
    @filter='onFilter1'
  &gt;
    &lt;p
      v-for=&quot;(item, i) in myArray1&quot; v-bind:key=&quot;i&quot;
    &gt;draggableOne---{{item}}&lt;/p&gt;

    &lt;button slot=&quot;header&quot; @click=&quot;addEle&quot;&gt;draggableOne---Add&lt;/button&gt;
    &lt;button slot=&quot;footer&quot; @click=&quot;removeEle&quot;&gt;draggableOne---Remove&lt;/button&gt;
  &lt;/draggable&gt;

  &lt;draggable
    group=&quot;people&quot;
    v-model=&quot;myArray2&quot;
    @choose='onChoose2'
    @clone='onClone2'
    @start='onStart2'
    @update='onUpdate2'
    @change=&quot;onChange2&quot;
    @add='onAdd2'
    @remove='onRemove2'
    @sort='onSort2'
    @end='onEnd2'
    @filter='onFilter2'
  &gt;
    &lt;p
      v-for=&quot;(item, i) in myArray2&quot; v-bind:key=&quot;i&quot;
    &gt;draggableTwo---{{item}}&lt;/p&gt;
  &lt;/draggable&gt;
&lt;/div&gt;


methods: {
  onChoose1() {
    console.log('onChoose1');
  },
  onClone1() {
    console.log('onClone1');
  },
  onStart1() {
    console.log('onStart1');
  },
  onUpdate1() {
    console.log('onUpdate1');
  },
  onChange1() {
    console.log('onChange1');
  },
  onSort1() {
    console.log('onSort1');
  },
  onAdd1() {
    console.log('onAdd1');
  },
  onRemove1() {
    console.log('onRemove1');
  },
  onEnd1() {
    console.log('onEnd1');
    console.log(this.myArray1);
  },
  onFilter1() {
    console.log('onFilter1');
  },


  onChoose2() {
    console.log('onChoose2');
  },
  onClone2() {
    console.log('onClone2');
  },
  onStart2() {
    console.log('onStart2');
  },
  onUpdate2() {
    console.log('onUpdate2');
  },
  onChange2() {
    console.log('onChange2');
  },
  onAdd2() {
    console.log('onAdd2');
  },
  onRemove2() {
    console.log('onRemove2');
  },
  onSort2() {
    console.log('onSort2');
  },
  onEnd2() {
    console.log('onEnd2');
    console.log(this.myArray2);
  },
  onFilter2() {
    console.log('onFilter2');
  },


  addEle() {
    this.myArray1.push('add');
  },
  removeEle() {
    this.myArray1.pop();
  },
}
</code></pre>
<h2 id="四-注意事项">四、注意事项</h2>
<pre><code>draggable：
    v-model=&quot;myArray&quot; 或者 :list=&quot;myArray&quot;
    draggable=&quot;.item&quot; 表示class=&quot;item&quot;的元素可拖动
    dhandle=&quot;.handle&quot; 表示class=&quot;handle&quot;的元素可控制拖动
    group=&quot;samegroup&quot; 如要两个以上容器间拖动添加相同的group名

draggable子元素上：
    :disabled=&quot;false&quot; 禁止移动

其他：
    点击删除元素时只触发choose事件
    添加删除元素用可以改变原数组和对象的方法
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQCloud词云插件]]></title>
        <id>https://h8396x.coding-pages.com/post/2QR3ZvDCx/</id>
        <link href="https://h8396x.coding-pages.com/post/2QR3ZvDCx/">
        </link>
        <updated>2019-07-02T14:00:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-添加css">1、添加css</h2>
<pre><code>&lt;link href=&quot;https://cdn.bootcss.com/jqcloud/1.0.4/jqcloud.css&quot; rel=&quot;stylesheet&quot;&gt;
</code></pre>
<h2 id="2-添加js">2、添加js</h2>
<pre><code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.bootcss.com/jqcloud/1.0.4/jqcloud-1.0.4.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="3-添加标签">3、添加标签</h2>
<pre><code>&lt;div id=&quot;tagsCloud&quot; style=&quot;width: 800px; height: 400px;&quot;&gt;&lt;/div&gt;  
</code></pre>
<h2 id="4-添加词云代码">4、添加词云代码</h2>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    var word_array = [
        {text: &quot;百度&quot;, weight: 10, html: {title: &quot;百度搜索引擎&quot;}},
        {text: &quot;百度&quot;, weight: 9, link: &quot;http://www.baidu.com/&quot;},
        {text: &quot;百度&quot;, weight: 8, link: &quot;http://www.baidu.com/&quot;},
        {text: &quot;百度&quot;, weight: 7, link:&quot;http://www.baidu.com&quot;}
    ];
    $(function() {
        $(&quot;#tagsCloud&quot;).jQCloud(word_array);
    });
&lt;/script&gt;  
</code></pre>
<h2 id="5-gridea添加云标签">5、Gridea添加云标签</h2>
<pre><code>&lt;!-- 在tags.ejs中添加html代码 --&gt;
&lt;div class=&quot;paper&quot; style=&quot;overflow: hidden&quot;&gt;
	&lt;div id=&quot;tagsCloud&quot; style=&quot;width: 100%;height: 600px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!-- 添加js代码 --&gt;
&lt;script src=&quot;&lt;%= themeConfig.domain %&gt;/media/jqcloud/jqcloud-1.0.4.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
	if ($('#tagsCloud')) {
		var cloudArr = [];
		// 遍历标签
		var tags = JSON.parse('&lt;%= JSON.stringify(tags) %&gt;'.replace(/&amp;#34;/g, '&quot;'));
		tags.forEach((tag, tagIndex) =&gt; {
			cloudArr.push({
				weight: tags.length - tagIndex,
				text: tag.name,
				link: tag.link,
			})
		})
		$('#tagsCloud').jQCloud(cloudArr);
	}
&lt;/script&gt;
</code></pre>
<h2 id="效果图">效果图</h2>
<figure data-type="image" tabindex="1"><img src="https://h8396x.coding-pages.com/post-images/1561991796683.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea连接coding步骤]]></title>
        <id>https://h8396x.coding-pages.com/post/VXnhCfkUJ/</id>
        <link href="https://h8396x.coding-pages.com/post/VXnhCfkUJ/">
        </link>
        <updated>2019-07-01T14:13:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-gridea添加配置">一、Gridea添加配置</h2>
<figure data-type="image" tabindex="1"><img src="https://h8396x.coding-pages.com/post-images/1561990514822.png" alt="" loading="lazy"></figure>
<pre><code>1、域名：静态pages应用域名
2、仓库：仓库的名字，例如：blogs
3、仓库用户名：账户名
4、token：添加在coding上设置的访问令牌
5、CNAME：添加三方域名，可不设置。
</code></pre>
<h2 id="二-coding添加token配置">二、coding添加token配置</h2>
<figure data-type="image" tabindex="2"><img src="https://h8396x.coding-pages.com/post-images/1561990547305.png" alt="" loading="lazy"></figure>
<h2 id="三-开启静态pagescoding可一键开启">三、开启静态pages（coding可一键开启）</h2>
<figure data-type="image" tabindex="3"><img src="https://h8396x.coding-pages.com/post-images/1561990607090.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[认识三大框架]]></title>
        <id>https://h8396x.coding-pages.com/post/PtK3WSLxU/</id>
        <link href="https://h8396x.coding-pages.com/post/PtK3WSLxU/">
        </link>
        <updated>2017-02-02T13:04:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="框架和库的区别">框架和库的区别</h2>
<pre><code>库：
    jQuery
    Swipper
    iScroll
    其他依赖jQuery的插件

框架：有限制
    Bootstrap  限制：12栅格
    Vue        限制：DOM操作无用
    Augular    限制：使用什么, 首先引入依赖; $开头都是angular系统对象
    react
</code></pre>
<h2 id="一-vue框架">一、Vue框架</h2>
<h3 id="1-vue是什么">1、Vue是什么</h3>
<pre><code>Vue是前端的JS框架, 提供很多功能, 很方便实现前端页面

特点: 数据驱动界面的框架
    js 开发:  html,js添加, 数据改变, 显示新的数据
    vue开发:  MVVM, 设计好界面, 做好界面和数据的关联, 改了数据之后, 界面自动改变
</code></pre>
<h3 id="2-作者">2、作者</h3>
<pre><code>Vue作者:尤雨溪
</code></pre>
<h3 id="3-特点-数据驱动界面">3、特点 —— 数据驱动界面</h3>
<pre><code>例：有个数组 , 放在ul的li标签内显示 , 删除或修改数据

原来：JSfor循环拿出数据 , 拼接li , 插入到 ul 中 ; 删除数据要删除对应的li标签

Vue:先有数据 , 实现界面 , 绑定数据和界面
    数据改变 , 界面自动改变
</code></pre>
<h2 id="二-angular-框架">二、Angular 框架</h2>
<h3 id="1-angular-是什么">1、Angular 是什么?</h3>
<pre><code>Angular是基于数据绑定和mvc设计模式的前端框架，是一个用于设计动态web应用的结构框架。不仅仅是js框架，核心其实是对HTML标签的增强。

核心1: 数据绑定(数据驱动)
    限制: 也是数据驱动, 先写好view, 设置绑定, 根据数据驱动界面

核心2: mvc设计结构
    model   界面的数据模型
    view    界面的显示
    controller    界面的控制器
    
    angular强制界面分为三个部分
    
    
好处:
    (1)数据绑定某种意义中简化界面, 修改了数据, 界面自动变化
    (2)程序的结构十分清晰,  angular强制界面分为三个部分, 
            有利于大规模项目的实现
</code></pre>
<h3 id="2-作者-2">2、作者</h3>
<pre><code>angular现在是google的框架, google有团队维护这个框架
</code></pre>
<h3 id="3-angular版本问题">3、angular版本问题</h3>
<pre><code>angular1(学习, JS语言, 不需要脚手架, 引入一个库能用了)
angular2(学习, Typescript, 需要脚手架[网络,命令行,node,webpack,npm,] )
angular4(学习, Typescript, 需要脚手架[网络,命令行,node,webpack,npm,] )
</code></pre>
<h3 id="4-angular特性">4、angular特性</h3>
<pre><code>(1)双向的数据绑定        (数据绑定是DOM变化，不是字符串的连接或者innerHTML变化。)
(2)模板module
(3)MVC                 (ViewModel , controller , view)
    viewmodel是一个用来提供特别数据和方法从而维护指定view的对象。是$scope的对象，只存在于AnguarJS的应用中。
    controller负责设置初始状态和参数化$scope方法用以控制行为。controller并不保存状态也不和远程服务互动。
    view是AngularJS解析后渲染和绑定后生成的HTML 。这个部分帮助你创建web应用的架构。

    $scope只是一个简单的js对象，这个对象使用简单的API来侦测和广播状态变化。
    $scope拥有一个针对数据的参考，controller定义行为，view处理布局和互动。

(4)服务和依赖注入      (对外提供某个特定的功能)
(5)指令                (作为标签、属性、注释和类名使用。)
</code></pre>
<h3 id="5-scope-和-module-和-ng-controller">5、$scope 和 module 和 ng-controller</h3>
<pre><code>$scope
    $scope是一个把view（一个DOM元素）连结到controller上的对象。
    在我们的MVC结构里，这个 $scope 将成为model，它提供一个绑定到DOM元素（及其子元素）上的excecution context。
    $scope 实际上就是一个JavaScript对象，controller和view都可以访问它，所以我们可以利用它在两者间传递信息。
    在这个 $scope 对象里，我们既存储数据，又存储将要运行在view上的函数。
    每一个Angular应用都会有一个 $rootScope。这个 $rootScope 是最顶级的scope，它对应着含有 ng-app 指令属性的那个DOM元素。

module
    模板,就是我们页面上的HTML代码，不需要附加任何额外的东西。在模板中可以使用各种指令来增强它的功能，这些指令可以让你把模板和数据巧妙的绑定起来。
    在&lt;html&gt;标签上多了一个属性ng-app=”MyApp”，它的作用就是用来指定ng的作用域是在&lt;html&gt;标签以内部分。
    在js中，我们调用angular对象的module方法来声明一个模块，模块的名字和ng-app的值对应。这样声明一下就可以让ng运行起来了。

ng-controller
    要明确创建一个$scope 对象，我们就要给DOM元素安上一个controller对象，使用的是ng-controller 指令属性。
    ng-controller指令给所在的DOM元素创建了一个新的$scope 对象，并将这个$scope 对象包含进外层DOM元素的$scope 对象里。在上面的例子里，这个外层DOM元素的$scope 对象，就是$rootScope 对象。
    所有scope都遵循原型继承（prototypal inheritance），这意味着它们都能访问父scope们。对任何属性和方法，如果AngularJS在当前scope上找不到，就会到父 scope上去找，如果在父scope上也没找到，就会继续向上回溯，一直到$rootScope 上。即如果controller是多层嵌套的，就会从最里面一直往外找。
</code></pre>
<h2 id="三-react框架">三、React框架</h2>
<p>虚拟DOM机制 (可以写原生应用)</p>
<h3 id="1-什么是react">1、什么是React</h3>
<pre><code>React是一个用于构建用户界面的Javascript框架, React主要侧重于构建View视图，采用虚拟DOM机制。
</code></pre>
<h3 id="2-作者-3">2、作者</h3>
<pre><code>起源于facebook, 2013年开源
</code></pre>
<h3 id="3-特点">3、特点</h3>
<pre><code>(1)侧重于view, 不是全的框架, 项目需要配合其他库去使用
(2)开发采用虚拟dom, vitual dom机制,通过算法优化 界面改变刷新,速度在各个框架中最快
(3)采用jsx语法, jsx语法是js的扩展
(4)组件式开发设计思想, 都是组件套组件。写一个项目, 搭积木。
</code></pre>
<h3 id="4-设计模式">4、设计模式</h3>
<pre><code>React   ( View层的技术，其他没有限定 )
Vue     ( Model View ViewModel )
Angular ( Model View Controller )
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MVC和MVVM设计模式]]></title>
        <id>https://h8396x.coding-pages.com/post/UuZyesJkJ/</id>
        <link href="https://h8396x.coding-pages.com/post/UuZyesJkJ/">
        </link>
        <updated>2017-02-01T13:37:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-mvc设计模式">一、MVC设计模式</h2>
<pre><code>Models模型主要关注的是业务数据，即管理一个业务应用的数据，它们既与用户界面无关也与表现层无关。

JavaScript 的视图是关于构建和操作DOM元素，视图是对我们的数据的一种可视化展现。

控制器是模型和视图之间的中介，典型的职责是当用户操作视图的时候同步更新模型。

M = Model    模型,数据模型
    Person = {
        name
        age
        sex
        ...
    }
    
V = View     视图,(html+css)显示数据的界面                
    div p span
    
C = Controller  控制器 
    1、拿出数据显示到界面
    2、界面有变化的时候，修改数据
</code></pre>
<ul>
<li>
<p>JavaScript 模板解决方案（例如Handlebars.js 和 Mustache）通常用于为视图定义模板作为标记，标记中包含有模板变量。标记要么存储在外部，要么存储在脚本标签里面，使用自定义的类型例如text/template。</p>
</li>
<li>
<p>将模板存储在外部的时候，这样在构建大型引应用的时候可以是模板按照需要动态加载。</p>
</li>
</ul>
<h2 id="二-mvp设计模式">二、MVP设计模式</h2>
<pre><code>模型-视图-展示器(MVP)是MVC设计模式的一个衍生模式,它专注于提升展现逻辑。
</code></pre>
<h2 id="三-mvvm设计模式">三、MVVM设计模式</h2>
<pre><code>MVVM是一种基于MVC和MVP的架构模式，它试图将用户界面（UI）从业务逻辑和行为中更加清晰地分离出来。

M = Model       数据模型
V = View        视图
VM = ViewModel  数据绑定

先写好数据，再写view界面，后写viewModel绑定
核心：数据变化后，界面自动变化
</code></pre>
<h2 id="四-三种设计模式的比较">四、三种设计模式的比较</h2>
<pre><code>MVP和MVVM都是MVC的衍生物。它和它的衍生物之间关键的不同之处在于每一层对于其它层的依赖，以及它们相互之间是如何紧密结合在一起的。

在MVC中，视图位于我们架构的顶部，其背后是控制器。模型在控制器后面，而因此我们的视图了解得到我们的控制器，而控制器了解得到模型。这里，我们的视图有对模型的直接访问。然而将整个模型完全暴露给视图可能会有安全和性能损失，这取决于我们应用程序的复杂性。MVVM则尝试去避免这些问题。

在MVP中，控制器的角色被代理器所取代，代理器和视图处于同样的地位，视图和模型的事件都被它侦听着并且接受它的调解。不同于MVVM，没有一个将视图绑定到视图模型的机制，因此我们转而依赖于每一个视图都实现一个允许代理器同视图去交互的接口。

MVVM进一步允许我们创建一个模型的特定视图子集，包含了状态和逻辑信息，避免了将模型完全暴露给视图的必要。不同于MVP的代理器，视图模型并不需要去引用一个视图。视图可以绑定到视图模型的属性上面，视图模型则去将包含在模型中的数据暴露给视图。像我们所提到过的，对视图的抽象意味着其背后的代码需要较少的逻辑。

对此的副作用之一就是视图模型和视图层之间新增的的用于翻译解释的一层会有性能损失。这种解释层的复杂度根据情况也会有所差异——它可能像复制数据一样简单，也可能会像我们希望用视图理解的一种形式去操作它们，那样复杂。由于整个模型是现成可用的，从而这种操作可以被避免掉，所以MVC没有这种问题。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同时配置github、gitee、coding的ssh]]></title>
        <id>https://h8396x.coding-pages.com/post/BeK9Br7U1/</id>
        <link href="https://h8396x.coding-pages.com/post/BeK9Br7U1/">
        </link>
        <updated>2017-01-04T13:01:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-创建rsa文件">1、创建rsa文件</h2>
<pre><code>cd ~/.ssh

ssh-keygen -t rsa -C &quot;xxx@xx.com&quot; -f &quot;id_rsa_github&quot;
ssh-keygen -t rsa -C &quot;xxx@xx.com&quot; -f &quot;id_rsa_gitee&quot;
ssh-keygen -t rsa -C &quot;xxx@xx.com&quot; -f &quot;id_rsa_coding&quot;

.
├── config
├── id_rsa_coding
├── id_rsa_coding.pub
├── id_rsa_gitee
├── id_rsa_gitee.pub
├── id_rsa_github
└── id_rsa_github.pub
</code></pre>
<h2 id="2-添加pub内容到相应平台">2、添加.pub内容到相应平台</h2>
<pre><code>cat id_rsa_github.pub
cat id_rsa_gitee.pub
cat id_rsa_coding.pub
</code></pre>
<h2 id="3-添加config文件解决冲突">3、添加config文件解决冲突</h2>
<pre><code># github
Host github.com
HostName github.com
IdentityFile /Users/yourname/.ssh/id_rsa_github
PreferredAuthentications publickey

# gitee
Host gitee.com
HostName gitee.com
IdentityFile /Users/yourname/.ssh/id_rsa_gitee
PreferredAuthentications publickey

# coding
Host git.coding.net
HostName git.coding.net
IdentityFile /Users/yourname/.ssh/id_rsa_coding
PreferredAuthentications publickey
</code></pre>
<h2 id="4-测试连接">4、测试连接</h2>
<pre><code>ssh -T git@github.com
ssh -T git@gitee.com
ssh -T git@git.coding.net
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[window7下leanote二进制部署]]></title>
        <id>https://h8396x.coding-pages.com/post/gcCr8zeHn/</id>
        <link href="https://h8396x.coding-pages.com/post/gcCr8zeHn/">
        </link>
        <updated>2017-01-03T14:20:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>教程：https://51.ruyo.net/2922.html</p>
</blockquote>
<h2 id="1-下载文件">1、下载文件</h2>
<pre><code>leanote二进制版   http://leanote.org/#download
MongoDB           http://dl.mongodb.org/dl/win32/x86_64
leanote客户端     https://leanote.com/ 
Robo 3T           https://robomongo.org/download
</code></pre>
<h2 id="2-安装步骤">2、安装步骤</h2>
<pre><code>1、在 ` D:\mongodb ` 下新建data（db , log）文件夹
2、配置环境变量 ` ;D:\mongodb\bin `
3、进入 ` D:\mongodb\bin ` 执行 ` mongod --dbpath D:\mongodb\data\db `
4、在浏览器：http://localhost:27017 查看是否安装成功；
5、进入` D: `导入数据 ` mongorestore -h localhost -d leanote --dir ./leanote/mongodb_backup/leanote_install_data/ `
</code></pre>
<h2 id="3-修改admin密码">3、修改admin密码</h2>
<pre><code>进入个人中心修改密码
</code></pre>
<h2 id="4-修改邮箱">4、修改邮箱</h2>
<pre><code>use leanote
db.users.update({Username:&quot;admin&quot;},{$set:{Email:&quot;xxxxxx@xxx.com&quot;}});
</code></pre>
<h2 id="5-客户端连接自建服务器">5、客户端连接自建服务器</h2>
<pre><code>http://localhost:9000
</code></pre>
<h2 id="6-备份数据">6、备份数据</h2>
<pre><code>mongodump -h localhost -d leanote -o D:/data
</code></pre>
<h2 id="7-制作bat快速启动文件">7、制作.bat快速启动文件</h2>
<pre><code>文件一：mongodb.bat
    d:
    cd mongodb\bin
    mongod --dbpath D:\mongodb\data\db
    
文件二：mongodb27017.bat
    mongo 127.0.0.1:27017
    
文件三：leanote.bat
    d:
    cd leanote\bin
    run.bat
</code></pre>
<h2 id="8-添加管理员">8、添加管理员</h2>
<pre><code>use admin
db.createUser({user:&quot;admin&quot;,pwd:&quot;password&quot;,roles:[&quot;root&quot;]})
db.auth(&quot;admin&quot;, &quot;password&quot;)
</code></pre>
<h2 id="9-添加数据库用户">9、添加数据库用户</h2>
<pre><code>use leanote
db.createUser({user: &quot;admin&quot;, pwd: &quot;password&quot;, roles: [{ role: &quot;dbOwner&quot;, db: &quot;leanote&quot; }]})
db.auth(&quot;admin&quot;, &quot;password&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mongodb]]></title>
        <id>https://h8396x.coding-pages.com/post/rhVfWiVDb/</id>
        <link href="https://h8396x.coding-pages.com/post/rhVfWiVDb/">
        </link>
        <updated>2017-01-02T14:19:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-安装和启动">1、安装和启动</h2>
<pre><code># 进入 /usr/local
cd /usr/local

# 下载
sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz

# 解压
sudo tar -zxvf mongodb-osx-x86_64-3.4.2.tgz

# 重命名为 mongodb 目录
sudo mv mongodb-osx-x86_64-3.4.2 mongodb

# 添加path路径
cd ~
vim .bash_profile

# 添加环境变量
export PATH=/usr/local/mongodb/bin:$PATH
export PATH=${PATH}:/usr/local/mongodb/bin

source .bash_profile
mongod -version

# 启动
sudo mongod
</code></pre>
<h2 id="2-安装可视化工具adminmongo">2、安装可视化工具adminMongo</h2>
<pre><code>1、克隆adminMongo
git clone https://github.com/mrvautin/adminMongo
cd adminMongo

2、安装
npm install

3、启动
npm start

4、访问网站
http://127.0.0.1:1234

5、MongoDB链接
mongodb://127.0.0.1:27017
</code></pre>
<h2 id="3-mongodb-安装问题">3、mongodb 安装问题</h2>
<h3 id="mac端-sudo-open-e-bash_profile-权限被拒绝">mac端 sudo open -e 〜/.bash_profile 权限被拒绝：</h3>
<p>解决：<code>sudo chown username ~/.bash_profile</code></p>
<h3 id="mac端-mongod-启动报错data-directory-datadb-not-found">mac端 mongod 启动报错：Data directory /data/db not found</h3>
<p>解决：更改指定运行路径，<code>mongod --dbpath '新的可访问存储路径'</code></p>
<h3 id="mac端-mongod-启动报错is-a-mongod-instance-already-running">mac端 mongod 启动报错：Is a mongod instance already running?</h3>
<p>解决：删除这句报错前提供路径下的 mongod.lock 文件，<code>sudo rm /xxx/xxx/data/db/mongod.lock</code></p>
<h3 id="mac端新开终端-mongod-命令失效">mac端：新开终端 mongod 命令失效</h3>
<p>原因：电脑端使用 iterm2 作为终端工具，未加载 ~/.bash_profile 文件中的环境变量<br>
详解：https://blog.csdn.net/Bronze5/article/details/103440877<br>
解决方案：</p>
<pre><code>cd ~
vim ~/.zshrc

# 解决iterm2 中zsh 模式不加载 ~/.bash_profile 文件编写的环境变量！
source $HOME/.bash_profile

source ~/.zshrc
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySql安装]]></title>
        <id>https://h8396x.coding-pages.com/post/Hej9Q0-li/</id>
        <link href="https://h8396x.coding-pages.com/post/Hej9Q0-li/">
        </link>
        <updated>2017-01-01T14:09:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-下载安装">一、下载安装</h2>
<pre><code>官网下载地址：https://dev.mysql.com/downloads/mysql/
可视化图形工具：SQLPro Studio

当弹出一个MYSQL Installer提示框的时候一定打开备忘录复制粘贴记下弹出框的密码

系统偏好设置 ——&gt; MySql ——&gt; start mysql server
</code></pre>
<h2 id="二添加环境变量">二添加环境变量</h2>
<pre><code>打开：vim ~/.bash_profile
添加：PATH=$PATH:/usr/local/mysql/bin
命令：source ~/.bash_profile
</code></pre>
<h2 id="三-登录sql">三、登录sql</h2>
<pre><code>mysql -u root -p
</code></pre>
<h2 id="四-常用命令">四、常用命令</h2>
<pre><code>CREATE DATABASE new_database;
show databases;
use databases
show tables
</code></pre>
<h2 id="五-修改强密码">五、修改强密码</h2>
<pre><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; (更新用户密码 )
</code></pre>
<h2 id="六-文章教程">六、文章教程</h2>
<pre><code>http://www.bubuko.com/infodetail-2065773.html
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lottie结合AE实时渲染动画]]></title>
        <id>https://h8396x.coding-pages.com/post/6WDISjhT3/</id>
        <link href="https://h8396x.coding-pages.com/post/6WDISjhT3/">
        </link>
        <updated>2016-12-01T13:58:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-lottievue文件">1、lottie.vue文件</h2>
<pre><code>/* 
  Lottie官网：https://www.lottiefiles.com/?page=1
  1、安装vue
  2、安装lottie     : npm install --save vue-lottie  
  3、引入components : import Lottie from './lottie.vue';
  4、引入json文件
*/

&lt;template&gt;
    &lt;div :style=&quot;style&quot; ref=&quot;lavContainer&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  import lottie from 'lottie-web';
  export default {
    props: {
      options: {
        type: Object,
        required: true
      },
      height: Number,
      width: Number,
    },

    data () {
      return {
        style: {
          width: this.width ? `${this.width}px` : '100%',
          height: this.height ? `${this.height}px` : '100%',
          overflow: 'hidden',
          margin: '0 auto'
        }
      }
    },

    mounted () {
      this.anim = lottie.loadAnimation({
          container: this.$refs.lavContainer,
          renderer: 'svg',
          loop: this.options.loop !== false,
          autoplay: this.options.autoplay !== false,
          animationData: this.options.animationData,
          rendererSettings: this.options.rendererSettings
        }
      );
      this.$emit('animCreated', this.anim);
    }
  }
&lt;/script&gt;
</code></pre>
<h2 id="2-渲染一个动画">2、渲染一个动画</h2>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;!-- 第一个动画 --&gt;
    &lt;lottie :options=&quot;defOpt1&quot; :height=&quot;300&quot; :width=&quot;300&quot; v-on:animCreated=&quot;handleAni&quot;/&gt;
    &lt;!-- 第二个动画 --&gt;
    &lt;lottie :options=&quot;defOpt2&quot; :height=&quot;200&quot; :width=&quot;200&quot; v-on:animCreated=&quot;handleAni&quot;/&gt;
    &lt;!-- 控制器 --&gt;
    &lt;div&gt;
        &lt;p&gt;Speed: x{{animationSpeed}}&lt;/p&gt;
        &lt;input type=&quot;range&quot; value=&quot;1&quot; min=&quot;0&quot; max=&quot;3&quot; step=&quot;0.5&quot; v-on:change=&quot;onSpeedChange&quot; v-model=&quot;animationSpeed&quot;&gt;
    &lt;/div&gt;
    &lt;button v-on:click=&quot;stop&quot;&gt;stop&lt;/button&gt;
    &lt;button v-on:click=&quot;pause&quot;&gt;pause&lt;/button&gt;
    &lt;button v-on:click=&quot;play&quot;&gt;play&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
// lottie组件
import Lottie from './lottie.vue';
// 示例动画json文件可在lottie官网下载
import * as animate1 from '../js/animate1.json';
import * as animate2 from '../js/animate2.json';

export default {
  name: 'app',
  components: {
    'lottie': Lottie
  },
  data() {
    return {
      count: 1,
      defOpt1: {animationData: animate1},
      defOpt2: {animationData: animate2}
      animationSpeed: 1
    }
  },
  methods: {
    handleAni: function (anim) {
      let aniName = &quot;anim&quot;+this.count;
      this[aniName] = anim;
      this.count++;
    },

    stop: function () {
      this.anim.stop();
    },

    play: function () {
      this.anim.play();
    },

    pause: function () {
      this.anim.pause();
    },

    onSpeedChange: function () {
      this.anim.setSpeed(this.animationSpeed);
    }
  }
}
&lt;/script&gt;

&lt;style rel=&quot;stylesheet/scss&quot; lang=&quot;scss&quot;&gt;
  #app{
    position: absolute;
    width: 100%;
    overflow: auto;
    background: greenyellow;
  }
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gka帧动画生成工具]]></title>
        <id>https://h8396x.coding-pages.com/post/593EuPf6q/</id>
        <link href="https://h8396x.coding-pages.com/post/593EuPf6q/">
        </link>
        <updated>2016-11-09T13:55:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-gka地址">1、gka地址</h2>
<pre><code>[gka](https://github.com/gkajs/gka)     // 简单、高效的帧动画生成工具，图片处理工具。
</code></pre>
<h2 id="2-安装使用">2、安装使用</h2>
<pre><code>npm i gka -g
gka E:\img
</code></pre>
<h2 id="3-gka参数">3、gka参数</h2>
<pre><code>-d, --dir &lt;string&gt;            #  图片文件夹地址
-u, --unique [boolean]        #  开启相同图片复用优化
-c, --crop [boolean]          #  开启空白裁剪优化
-s, --sprites [boolean]       #  开启合图优化
-m, --mini [boolean]          #  开启图片压缩
-p, --prefix [string]         #  文件重命名前缀
-t, --template &lt;string&gt;       #  生成动画文件模板 默认 css ，可选模见 Templates 模板列表
-f, --frameduration &lt;number&gt;  #  每帧时长，默认 0.04
-i, --info [boolean]          #  开启输出信息文件
-o, --output &lt;string&gt;         #  指定生成目录地址
-a, --algorithm &lt;string&gt;      #  合图布局模式 默认 left-right，可选 binary-tree | top-down ..

--bgcolor &lt;string&gt;            #  为图片增加背景色，可选，支持格式：'rgb(255,205,44)'、 '#ffcd2c'
--count &lt;number&gt;              #  生成多合图，指定几张图片合成一张合图，可选
--ratio &lt;number&gt;              #  生成指定的N倍图动画，如 --ratio 2 支持retina屏幕的2倍图动画， 可选
--split [boolean]             #  开启图片空白拆分优化，与 -t canvas 结合使用
--diff [boolean]              #  开启图片像素差优化，与 -t canvas 结合使用
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插件-cookie本地存储]]></title>
        <id>https://h8396x.coding-pages.com/post/_3_-7UicJ/</id>
        <link href="https://h8396x.coding-pages.com/post/_3_-7UicJ/">
        </link>
        <updated>2016-11-08T13:51:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-本地存储插件cookie">一、本地存储插件Cookie</h2>
<pre><code>&lt;!--
    本地： 数据存储在磁盘上
    
    实例：
        登录        记住用户名，保持1周登录
                        
    持久化存储/本地存储
        (1) cookie
        (2) H5 - localStorage
                (sessionStorage会话存储)
        (3) H5 -WebSQL 浏览器中的数据库存储
        (4) H5 -IndexedDb 索引数据库
--&gt;
</code></pre>
<h3 id="1-根据需要写html和css样式">1、根据需要写HTML和CSS样式</h3>
<h3 id="2-引入jquery文件和cookie插件">2、引入jQuery文件和cookie插件</h3>
<pre><code>注意：注意先后顺序
</code></pre>
<h3 id="3-js实例">3、JS实例</h3>
<pre><code>&lt;!--
    jquery.cookie.min.js
    插件: 先导入jquery, 再导入这个插件
    
用法:
    读取某个cookie值, $.cookie(&quot;username&quot;)
     
    设置cookie值 
        $.cookie(&quot;username&quot;,&quot;zhangsan&quot;)  
             有效期-网页不关闭
             
        $.cookie(&quot;username&quot;,&quot;zhangsan&quot;,{
            path:&quot;/&quot;,
            expires:7    //7天有效    //date对象
        })
--&gt;
</code></pre>
<h2 id="二-实例记住用户名和密码-七天内自动登录">二、实例：记住用户名和密码， 七天内自动登录</h2>
<h3 id="1-html和css">1、HTML和CSS</h3>
<pre><code>&lt;div id=&quot;&quot;&gt;
    &lt;p&gt;导航栏&lt;/p&gt;
    &lt;a class=&quot;login-link&quot; href=&quot;&quot;&gt;登录&lt;/a&gt; &lt;a class=&quot;reg-link&quot; href=&quot;&quot;&gt;注册&lt;/a&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div id=&quot;&quot;&gt;
    &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
        &lt;input class=&quot;username&quot; type=&quot;text&quot; /&gt;&lt;br /&gt;
        &lt;input class=&quot;password&quot; type=&quot;password&quot; /&gt;&lt;br /&gt;
        &lt;div id=&quot;&quot;&gt;
            &lt;input class=&quot;remember&quot; type=&quot;checkbox&quot; value=&quot;&quot;/&gt;记住用户名和密码&lt;br/&gt;
            &lt;input type=&quot;checkbox&quot; value=&quot;&quot;/&gt;一周之内自动登录&lt;br/&gt;
        &lt;/div&gt;
        &lt;div id=&quot;&quot;&gt;
            &lt;button class=&quot;login&quot;&gt;登录&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;        
&lt;/div&gt;
</code></pre>
<h2 id="js实现">JS实现</h2>
<pre><code>//导入相关文件
&lt;script src=&quot;jquery-1.9.1.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;jquery.cookie.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
        
    $(function () {
        //登陆后将导航栏的登录改为个人用户名
        if($.cookie(&quot;isLogin&quot;) == &quot;1&quot;){
            $(&quot;.login-link&quot;).html($.cookie(&quot;username&quot;));
        }
        
        //判断自动登录(获取用户名、密码放入对应的input框)
        if($.cookie(&quot;username&quot;)){
            $(&quot;.username&quot;).val($.cookie(&quot;username&quot;))
        }
        if($.cookie(&quot;password&quot;)){
            $(&quot;.password&quot;).val($.cookie(&quot;password&quot;))
        }
        if($.cookie(&quot;isRemember&quot;) == &quot;1&quot;){
            $(&quot;.remember&quot;)[0].checked = true;
        }
        
        //设置用户名、密码, 可与后台交互动态获取 
        var username = &quot;zz&quot;
        var password = &quot;123456&quot;
        
        //点击登录按钮的事件处理
        $(&quot;.login&quot;).click(function () {
            //登陆时获取输入的 用户名 和 密码
            var inputUsername = $(&quot;.username&quot;).val();
            var inputPassword = $(&quot;.password&quot;).val();
            
            //判断输入的用户名密码与设置的用户名密码是否相等
            if(inputUsername == username&amp;&amp;inputPassword == password){
                
                //定义了距离当前时间20 * 1000ms = 20s 的时间
                var date = new Date();
                date.setTime(date.getTime()+20*1000)
            
                //如果记住密码框 被选中 记住用户名和密码等
                if($(&quot;.remember&quot;)[0].checked){
                    $.cookie(&quot;isRemember&quot;,&quot;1&quot;,{
                        path:&quot;/&quot;,
                        expires:date    //date对象
                    })
                    $.cookie(&quot;username&quot;,inputUsername,{
                        path:&quot;/&quot;,
                        expires:date    //date对象
                    })
                    $.cookie(&quot;password&quot;,inputPassword,{
                        path:&quot;/&quot;,
                        expires:date    //date对象
                    })
                }                    
                
                $(&quot;.login-link&quot;).html($.cookie(&quot;username&quot;))
                
                $.cookie(&quot;isLogin&quot;,&quot;1&quot;,{
                    path:&quot;/&quot;,
                    expires:date    //7天有效    //date对象
                })
            }else{
                alert(&quot;登录失败&quot;)
            }
            
        })
        
    })
    
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插件-pagination分页]]></title>
        <id>https://h8396x.coding-pages.com/post/KENJDZdGY/</id>
        <link href="https://h8396x.coding-pages.com/post/KENJDZdGY/">
        </link>
        <updated>2016-11-07T13:50:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-css部分">1、CSS部分</h3>
<pre><code>引入CSS样式
</code></pre>
<h3 id="2-html部分">2、HTML部分</h3>
<pre><code>//注意ID名, 类名
&lt;div id=&quot;Pagination&quot; class=&quot;pagination&quot;&gt;
        
&lt;/div&gt;
</code></pre>
<h3 id="3-js部分">3、JS部分</h3>
<pre><code>(1)引入jQuery文件和分页插件的JS文件

(2)初始化及数据下载后的具体显示
    $(function(){
        //第几页，每页多少个数据
        var page = 1;
        var count = 10;

        //回调函数
        function pageselectCallback(index) {
            //点击之后, 修改page,重新下载
            var new_page = index+1;
            //解决重复调用问题 还是这一页, return ； 判断两个相等, 不执行下载数据 ；当page为1, current_page是0
            if(index == page-1){
                return;
            }        
            page = new_page;
            downloadListData();
        }
         
        //初始化函数的参数
        //参数1: 总页数total = 数据总数 / count
        //参数2: 对象
        //  current_page:当前页
        //    num_edge_entries:前面显示3个
        //    num_display_entries:后面显示3个
        //    callback 点击后回调
        //    items_per_page 每页多少数据
        //    prev_text 显示什么(上一页)
        //    next_text 显示什么(下一页)
        
        //初始化函数
        function pageShow( total ){
            $(&quot;#Pagination&quot;).pagination(total , {
                current_page:page-1,
                num_edge_entries: 3,
                num_display_entries: 3,
                callback: pageselectCallback,
                items_per_page:count,
                prev_text:&quot;上一页&quot;,
                next_text:&quot;下一页&quot;
            });
        }    

        //数据下载函数
        function downloadListData(){
            //1、通过get,post等拿数据
            //2、数据拿完后调用分页的初始化函数
            pageShow( total )
        }

    })
</code></pre>
<h2 id="原生js实现分页">原生JS实现分页</h2>
<pre><code>$(function () {            
    //第几页
    var page = 1;
    //每页多少个数据
    var count = 10;
    
    function downloadListData () {                
        //接口中用start
        var start = (page-1)*count;
        var url = readListUrl+&quot;&amp;start=&quot;+start+&quot;&amp;count=&quot;+count;
        
        $.getJSON(url,{},function (r) {
            //下载数据, 并生成dom显示
            var list = r.data;            
            var html = &quot;&quot;;
            for(var i=0; i&lt;list.length; i++){
                var item = list[i];
            }
            $(&quot;.section_list&quot;).html(html);                    
            
            //获取页数
            var pageCount = Math.ceil(r.total/10);

            //生成分页dom, 并添加CSS样式
            $(&quot;.list_pagination&quot;).html(&quot;&quot;);
            var html = &quot;&quot;;
            html += &quot;&lt;li data-page='first'&gt;首页&lt;/li&gt;&quot;
            html += &quot;&lt;li data-page='prev'&gt;上一页&lt;/li&gt;&quot;
            
            for(var i=0; i&lt;pageCount; i++){
                if(i+1 == page){
                    html += &quot;&lt;li style='background-color:gray' data-page='&quot;+(i+1)+&quot;'&gt;&quot;+(i+1)+&quot;&lt;/li&gt;&quot;
                }else{
                    html += &quot;&lt;li data-page='&quot;+(i+1)+&quot;'&gt;&quot;+(i+1)+&quot;&lt;/li&gt;&quot;
                }
            }
            
            html += &quot;&lt;li data-page='next'&gt;下一页&lt;/li&gt;&quot;
            html += &quot;&lt;li data-page='last'&gt;最后一页&lt;/li&gt;&quot;
            $(&quot;.list_pagination&quot;).html(html);
            
            $(&quot;.list_pagination li&quot;).css({
                &quot;padding&quot;:&quot;3px 5px&quot;,
                &quot;margin-left&quot;:&quot;10px&quot;,
                &quot;border&quot;:&quot;1px solid black&quot;
            })
            
            //实现点击事件
            $(&quot;.list_pagination li&quot;).on(&quot;click&quot;,function () {
                var click_page = $(this).attr(&quot;data-page&quot;);
                
                if(click_page == page){ //重复点击当前页
                    console.log(&quot;已经加载!&quot;);
                    return;
                }
                
                if(click_page == &quot;first&quot;){ //第一页
                    page = 1;
                }else if(click_page == 'prev'){ //前一页
                    page--;
                    if(page&lt;1){
                        page=1;
                    }
                }else if(click_page == 'next'){ //下一页
                    page++;
                    if(page&gt;pageCount){
                        page=pageCount;
                    }
                }else if(click_page == &quot;last&quot;){ //上一页
                    page = pageCount;
                }else{  //点击了数字 重新发起请求
                    page = click_page;
                }

                //重新加载数据
                downloadListData ();
            })                    
        })                
    }
    downloadListData ();
})    
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插件-Base64加密]]></title>
        <id>https://h8396x.coding-pages.com/post/WF0J3vp7F/</id>
        <link href="https://h8396x.coding-pages.com/post/WF0J3vp7F/">
        </link>
        <updated>2016-11-06T13:46:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-引入js和base64文件注意先后问题">1、引入JS和Base64文件（注意先后问题）</h3>
<pre><code>&lt;script src=&quot;jquery.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;base64.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre>
<h3 id="2-加密和解密">2、加密和解密</h3>
<pre><code>$(function(){
    var str = &quot;秦时明月之万里长城&quot;;
    
    //1、加密
    var b64 = new Base64();
    var str = b64.encode(&quot;你确定要进攻吗&quot;);
    console.log(str);
    
    //2、解密
    var newStr = b64.decode(str);
    console.log(newStr);
    
    //3、解密密文
    var newStr2 = b64.decode(&quot;5L2g56Gu5a6a6KaB6L+b5pS75ZCX&quot;);
    console.log(newStr2);
    
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插件-lazyload懒加载]]></title>
        <id>https://h8396x.coding-pages.com/post/ojNO2n5Hc/</id>
        <link href="https://h8396x.coding-pages.com/post/ojNO2n5Hc/">
        </link>
        <updated>2016-11-05T13:38:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-懒加载的原理">一、懒加载的原理</h2>
<pre><code>懒加载：并没有全部加在完毕，只显示一部分商品（减轻服务器压力）
原理：
    1、一次性把所有路径都拿过来
    2、但是，并没有把路径放到src中，而是放到自定义属性中
    3、当滚动到指定位置，将自定义的属性放到src中，图片才会加载出来
 
预加载：loading...的时候，把资源加载进来，用户响应很快，服务器压力很大
</code></pre>
<h2 id="二-原生js实现懒加载">二、原生JS实现懒加载</h2>
<blockquote>
<p>注意：加载图片 = （图片距离页面顶端高度 &lt; 浏览器滚动距离 + 可视区域距离）</p>
</blockquote>
<pre><code>var imgs = document.getElementsByTagName(&quot;img&quot;);

function loadImg(){
    //获取当前可视区域高度
    var h1 = window.innerHeight;
    //浏览器滚动过的高度
    var h2 = document.body.scrollTop || document.documentElement.scrollTop;
    for (var i = 0 ; i &lt; imgs.length ; i++) {
        //判断当前图片距离顶端的距离 &lt; ...
        if(imgs[i].offsetTop &lt; h1 + h2){                
            imgs[i].src = imgs[i].getAttribute(&quot;data-src&quot;);
        }
    }
}
    
loadImg();

window.onscroll = function(){
    loadImg();            
}
</code></pre>
<h2 id="三-插件实现懒加载">三、插件实现懒加载</h2>
<pre><code>//注意给img添加类名lazy  , 并设置自定义属性data-original
&lt;img class=&quot;lazy&quot; src=&quot;&quot; data-original=&quot;img/search1.jpg&quot; /&gt;



/* JS部分 注意引入文件的顺序 */
&lt;script src=&quot;js/jquery.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/jquery.lazyload.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    $(function(){
        $(&quot;.lazy&quot;).lazyload();
    })    
&lt;/script&gt;
</code></pre>
<h2 id="四-vue实现懒加载">四、Vue实现懒加载</h2>
<pre><code>// model模型-存储数据的地方
var data = {
    list:[],
    imagePrefix:imagePrefix,
    /*加载更多*/
    start:0,
    count:5,
    /*是否加载*/
    isRefresh:false
}


// ViewModel数据驱动界面-数据和界面绑定
var app = new Vue({
    //选择id为app的选择器
    el:&quot;#app&quot;,  
    data:data,
    methods:{
        downloadData:function(){
            var url = readListUrl+&quot;&amp;start=&quot;+this.start+&quot;&amp;count=&quot;+this.count;
            this.$http({url:url}).then(function(response){
                var list = response.data.data;
                //当前加载的加上之前加载的
                this.list = this.list.concat(list);
                this.isRefresh = false;
            })
        }
    },
    created:function(){
        this.downloadData();
        var self = this;
        /* 加载更多的实现 */
        window.onload = function(){
            window.onscroll = function(){
                //滚动到底部的条件   滚动条到顶部(变) + 滚动条对应的界面高度(可视高度,不变) === 整个页面的高度(不变)
                var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
                var clientHeight = document.documentElement.clientHeight;
                var pageHeight = document.body.scrollHeight;
                
                if( Math.abs(scrollTop+clientHeight-pageHeight) &lt;= 6 ){
                    /* 加载更多 */
                    if(!self.isRefresh){
                        self.start += self.count;
                        self.downloadData();
                        self.isRefresh = true;
                    }
                }
            }
        }                        
    }
});
</code></pre>
]]></content>
    </entry>
</feed>