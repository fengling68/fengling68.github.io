import{_ as n,o as s,c as a,f as t}from"./app.3e5f729f.js";const p={},o=t(`<h1 id="\u52A8\u753B\u8F6C\u76D8\u62BD\u5956" tabindex="-1"><a class="header-anchor" href="#\u52A8\u753B\u8F6C\u76D8\u62BD\u5956" aria-hidden="true">#</a> \u52A8\u753B\u8F6C\u76D8\u62BD\u5956</h1><h2 id="\u8F6C\u76D8\u8BA1\u7B97\u5956\u54C1\u65CB\u8F6C\u4F4D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u76D8\u8BA1\u7B97\u5956\u54C1\u65CB\u8F6C\u4F4D\u7F6E" aria-hidden="true">#</a> \u8F6C\u76D8\u8BA1\u7B97\u5956\u54C1\u65CB\u8F6C\u4F4D\u7F6E</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">computingAngle</span><span class="token punctuation">(</span><span class="token parameter">awards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">CIRCLE_ANGLE</span> <span class="token operator">=</span> <span class="token number">360</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> average <span class="token operator">=</span> <span class="token constant">CIRCLE_ANGLE</span> <span class="token operator">/</span> awards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  awards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">*</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      -webkit-transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);
      transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> awards<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><h2 id="\u6587\u5B57\u5F2F\u66F2\u6548\u679C" tabindex="-1"><a class="header-anchor" href="#\u6587\u5B57\u5F2F\u66F2\u6548\u679C" aria-hidden="true">#</a> \u6587\u5B57\u5F2F\u66F2\u6548\u679C</h2><h3 id="\u5B9A\u4E49\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49\u65B9\u6CD5" aria-hidden="true">#</a> \u5B9A\u4E49\u65B9\u6CD5</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * \u4F20\u5165\u6570\u7EC4\u4F7F\u5B57\u7B26\u51FA\u73B0\u5F2F\u66F2\u6548\u679C\uFF0C\u9700\u63A7\u5236\u5B57\u6570\u8C03\u6574\u663E\u793A\u6548\u679C\uFF08\u5F85\u5B8C\u5584\uFF09
 * <span class="token keyword">@param</span> <span class="token parameter">data</span> <span class="token punctuation">{</span>
 *  text: Array,
 *  rLen: Number, // \u65CB\u8F6C\u89D2\u5EA6
 *  xLen: Number, // \u4F4D\u79FB x
 *  yLen: Number, // \u4F4D\u79FB y
 * <span class="token punctuation">}</span>
 */</span>
<span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    text<span class="token punctuation">,</span> rLen <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> xLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> yLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> isEven <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> isEven <span class="token operator">?</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  text<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5076\u6570</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> condition <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">&lt;</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> midIndex<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">&gt;</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> midIndex<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> i <span class="token operator">===</span> midIndex<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      index <span class="token operator">=</span> condition<span class="token punctuation">[</span>condition<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5947\u6570</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      index <span class="token operator">=</span> i <span class="token operator">-</span> midIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      display: inline-block;
      -webkit-transform-origin: 50% 100%;
      transform-origin: 50% 100%;
      -webkit-transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> rLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg) translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> xLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> yLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px);
      transform: rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> rLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg) translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">*</span> xLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> yLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px);
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> word<span class="token punctuation">,</span> style <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> words<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * \u5B57\u7B26\u4E32\u622A\u53D6 &amp; \u8F6C\u6362\u6570\u7EC4
 */</span>
<span class="token function">cutStr</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> maxLen<span class="token punctuation">,</span> ellipsis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> newStr <span class="token operator">=</span> len <span class="token operator">&gt;</span> maxLen <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">;</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> newStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ellipsis <span class="token operator">&amp;&amp;</span> len <span class="token operator">&gt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> newArr<span class="token punctuation">,</span>
    <span class="token literal-property property">rLen</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xLen</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">yLen</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> words<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div><h3 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;\u4E94\u56DB\u4E09\u8D30\u58F9\u8D30\u4E09\u56DB\u4E94&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cutStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wordCurveHandle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;\u54C8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u54C8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u54C8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u54C8&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,9),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","\u52A8\u753B\u8F6C\u76D8\u62BD\u5956.html.vue"]]);export{i as default};
