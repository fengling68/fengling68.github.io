(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{811:function(n,e,o){"use strict";o.r(e);var a=o(1),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,o=n._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[n._v("#")]),n._v(" 对象")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("OO(object oriented)  面向对象\nOOP(object oriented programming) 面向对象编程\n\n面向对象实质: 面向对象是对面向过程的封装\n对象是一个独立的命名空间，不受外界影响。\n键值对 key:value;\n\n对象是一系列无序属性构成 属性名称:属性值;\n")])])]),o("h2",{attrs:{id:"对象的创建"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[n._v("#")]),n._v(" 对象的创建")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('//(1)字面量方式\nvar obj = {\n    name:\'荆天明\',\n    age:18,\n    sex:\'男\',\n    say:function(){\n        console.log("秦时明月-" + this.name);\n    }\n};\n\n\n//(2)工厂方式\nfunction factory(name,price){\n    var obj = {};    //空对象\n    obj.name = name;\n    obj.price = price;\n    return obj;\n}\n\nvar bmw = factory("宝马","25万");    \nconsole.log(bmw);      //Object {name: "宝马", price: "25万"}\n\n\n//(3)高级方式( new + 构造函数 方式)\nvar obj = new Object();\n')])])]),o("h2",{attrs:{id:"属性的访问"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#属性的访问"}},[n._v("#")]),n._v(" 属性的访问")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('//(1)增加属性\nobj.height = "180cm";\n\n//(2)删除属性\ndelete obj.sex;\ndelete obj["sex"];\n\n//(3)修改属性\nobj.name = "盖聂";\n\n//(4)访问属性或方法\nconsole.log(obj.name);\nconsole.log(obj["name"]);\n\nobj.say();\nobj["say"]();\n\n//(5)遍历对象\n对象只能用for in遍历(拿到的是每个属性)\nfor(var key in obj){\n    console.log(key);       //每个属性\n    console.log(obj[key]);  //每个属性值, 只能用中括号方式访问\n}\n')])])]),o("h2",{attrs:{id:"抓错语句-不会阻止下面的代码运行"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#抓错语句-不会阻止下面的代码运行"}},[n._v("#")]),n._v(" 抓错语句(不会阻止下面的代码运行)")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("try{\n    //尝试处理的代码\n    console.log(height);\n}catch(e){\n    //抓取错误信息\n    console.log(e);\n}\n")])])]),o("h2",{attrs:{id:"给对象obj添加对象属性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#给对象obj添加对象属性"}},[n._v("#")]),n._v(" 给对象obj添加对象属性")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('var car = {\n    name:\'变形金刚\',\n    color:\'yellow\',\n    price:100000,\n    say:function(){\n        console.log("我是变形金刚");\n    },\n    run:function(){\n        console.log("我要跑了");\n    }\n};\n\nobj.car = car;\nconsole.log(car);\n\n//访问obj的car属性中的name值\nconsole.log(obj.car.name);\nconsole.log(obj["car"]["name"]);\n')])])]),o("p",[o("strong",[n._v("访问对象不存在的属性, 结果为undefine, 弱类型的体现")])]),n._v(" "),o("h2",{attrs:{id:"new-构造函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#new-构造函数"}},[n._v("#")]),n._v(" new + 构造函数")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('new String()\nnew Array()\nnew Date()\nnew RegExp()\nnew Map()\n\n//(1)创建构造函数\nfunction Animal(name,color){\n    this.name = name;\n    this.color = color;\n    this.say = function(){\n        console.log("我是"+this.name);\n    }\n}\n\n//(2)创建对象\nvar cat = new Animal("加菲猫","白色");\n\n//(3)属性访问\nconsole.log(cat);\ncat.say();\n\n构造函数：首字母大写\n一个构造函数，可以创建多个实例对象    一对多\n')])])]),o("h2",{attrs:{id:"检测数据类型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#检测数据类型"}},[n._v("#")]),n._v(" 检测数据类型")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('(1)typeof: 能检测类型，但不能细化\n(2)instanceof: 检测某个实例对象与构造函数的关系(实例对象 instanceof 构造函数)\n(3)object.prototype.toString.call();\n    object String\n    object Array\n    object Function\n\n    object.prototype.toString.call(obj).slice(8,-1) === "Array"\n\n********************* 示例1 ************************************\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n}\n\nvar person1 = new Person("姬如千泷",18);\nconsole.log(typeof person1);                   // Object\nconsole.log(person1 instanceof Person);        // true\n\n******************** 示例2 *************************************\nvar arr = [1,2,3];\nconsole.log(typeof arr);                       // Object\nconsole.log(arr instanceof Array);             // true\n\n******************** 示例3 *************************************\nfunction fn(){\n    console.log(123);\n}\nconsole.log(typeof Person);                    //function特殊的数据类型\nconsole.log(typeof fn);                        //function特殊的数据类型\nconsole.log(fn instanceof Function);           //true\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);